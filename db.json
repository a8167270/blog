{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/package.json","hash":"85bcd5e6174018729c071b745208c61efbe802df","modified":1491989097414},{"_id":"themes/BlueLake/README.en.md","hash":"bbf97e0ccd3d5b5873557ec79c2d92f376c5a8e7","modified":1491989097408},{"_id":"themes/BlueLake/README.md","hash":"aef443d6167e2fbde60b90b4498357a804077107","modified":1491989097408},{"_id":"source/_posts/HttpClient.md","hash":"0e9b9f0728c7b7f4ee7fb7ca102b4a2245d629c2","modified":1492139421589},{"_id":"source/_posts/Http协议.md","hash":"016196736b97432654c571af640fbd1e18eb78bb","modified":1492138643647},{"_id":"source/_posts/Servlet与JSP.md","hash":"5b385b4e289033bd1fe87f4fb98aa611919dcaef","modified":1492132083038},{"_id":"themes/BlueLake/.git/COMMIT_EDITMSG","hash":"598e8f1103142121a25a6445f780ec948eedc5bf","modified":1492086403796},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491989097401},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1491989097407},{"_id":"themes/BlueLake/.git/config","hash":"7e25608fae05296ec4af5a16d8ecf5042faf30a3","modified":1491989097402},{"_id":"source/about/index.md","hash":"6c7e9a4cfa358a1e3c4ac3200e37daec6c46c1e4","modified":1492082012632},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491989093253},{"_id":"themes/BlueLake/.git/index","hash":"ff9d096c56b66c22f28d02617ca952211e3f99ee","modified":1492086403796},{"_id":"themes/BlueLake/.git/packed-refs","hash":"9d98604fc58292ce141ab1c599435dcac8fb1b41","modified":1491989097399},{"_id":"themes/BlueLake/languages/en.yml","hash":"17913588a78da9e0786ff81359fb74bb8f318f13","modified":1491989097409},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"cab904a1bbf8d0a189f4132f383224ee8abcc2d5","modified":1491989097408},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"1439db20fb4f4490fab3daea52698479d3fe3f4c","modified":1491989097409},{"_id":"themes/BlueLake/languages/ko.yml","hash":"9e90f546b374cb00e0566f2703642a4129f68029","modified":1491989097409},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"4f69ffded977be0153a8cbd84fb2a95f4da572db","modified":1491989097409},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"7b97b232cb15cd476cdbf6efe7e904add553ce16","modified":1491989097409},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"0f0f120fe5abfd6e0431bbf6757947247c96c341","modified":1491989097409},{"_id":"themes/BlueLake/_config.yml","hash":"c3deaff8f367b004ed26334cef666a9c911ee161","modified":1492084329379},{"_id":"source/_posts/我对代码的理解.md","hash":"163e1ae0ccea7e38dd17ee4859eab72ea7f7c817","modified":1492083521056},{"_id":"source/_posts/写在前面的话.md","hash":"6d32b53f11df53c4d7fce144ea7bfb615e8831f5","modified":1492081761440},{"_id":"themes/BlueLake/layout/archive.jade","hash":"bf6256702a4a30f19fb3a49dd4e1af1d3445cf71","modified":1491989097412},{"_id":"themes/BlueLake/layout/base.jade","hash":"aaf4922adaea4dd1ada9ec203083c10734feaa41","modified":1491989097413},{"_id":"themes/BlueLake/layout/tag.jade","hash":"7e8fe70f3d4c6e03658c8b88bd93b6bf1f06e258","modified":1491989097413},{"_id":"themes/BlueLake/layout/category.jade","hash":"d1beec4b0741cd8a2cd058939fd50238a6a6068e","modified":1491989097413},{"_id":"themes/BlueLake/layout/post.jade","hash":"daec2b8c915a64d9904442cea91be9c6e04b3aba","modified":1491989097413},{"_id":"themes/BlueLake/layout/page.jade","hash":"d18e258121bf6fbeb9f512ac9cab2473c01476b4","modified":1491989097413},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1491989097414},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1491989097415},{"_id":"themes/BlueLake/layout/index.jade","hash":"3fe1f0c5021ac696ed9846ecb1c75d285fa46708","modified":1491989097413},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491989093253},{"_id":"source/_posts/Servlet与JSP/filter.png","hash":"b627de0a6d139053050ad1e3796e62481da4da60","modified":1492084633927},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491989093254},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491989093257},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"2e5451619cbae964c45c50925bc6a73701cb779f","modified":1492086403796},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1491989093254},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"d1b124aaaef36a90b49086d90741510cd583b566","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"370519c70e95e00c89197986827f0f8281f8d7df","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1491989097411},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1491989097411},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"9beba53cedfe0fd9bd5c0ba0707784bfc6cc3017","modified":1491989097411},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"99c92f051b66b4d63dfc90e55b1fdb943a620c46","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1491989097411},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1491989097410},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"c12994a9076e9f428d960b14689a9c15fe15d93c","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"5e2c1d5b4d3323b7b0d5bfeb9a62e6d580b42c10","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"f76015c742a8a4353dd374863947e83c48c6bd16","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/search.jade","hash":"fa4ce51b7caa955aa3a0386bf819bf7edf022425","modified":1491989097412},{"_id":"source/_posts/Servlet与JSP/ServletLifeCycle.jpg","hash":"69aab25225cd25f92531cc51aa4a1ae1143ab06d","modified":1492131948848},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"274e5d9126bd6bc195cfd0d6a62b0482cf61d698","modified":1491989097415},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"77a78dbe06adc208cb0d3497f1ea2b9b66f44226","modified":1491989097416},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1491989097414},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"ed7141f7374cdb3f05a28fe818b7aa6b47baac37","modified":1491989097415},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"abc2a26a153298a497b6eba314d93f0835cc4185","modified":1491989097416},{"_id":"themes/BlueLake/source/js/totop.js","hash":"4827a35694b99eadb6dfee5281d2488a33614077","modified":1491989097417},{"_id":"themes/BlueLake/source/css/style.styl","hash":"4950c91d327645618ccc594523a292d1d15c3122","modified":1491989097415},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1491989097417},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1491989097417},{"_id":"themes/BlueLake/.git/objects/17/2001d54f387fd143cd22e07c3698011e248822","hash":"bb1c952d856a662023315e6b7918fe957d9b1367","modified":1492086403796},{"_id":"themes/BlueLake/.git/objects/97/641d3bc8f0c603560bf7afbe84248d56774092","hash":"3613bda2d8cd22cb286c9a2fbc9ba931375748d6","modified":1492086403796},{"_id":"themes/BlueLake/.git/objects/pack/pack-c78babc38c615104f9f0b9ab8e1eeca0ff1244b7.idx","hash":"233df69f4e812429aabddc75bba5ce75c2ac3bf1","modified":1491989097295},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"0687951b2d77cc271011dfc8f1c7f5df3a39b890","modified":1492086403796},{"_id":"themes/BlueLake/.git/objects/88/3d1d0fd2ba3463b03dc9a0525882053426c8a3","hash":"dd8c2b6e467fc8c62b84ea8747513f0b9d6a882a","modified":1492086403718},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"2e5451619cbae964c45c50925bc6a73701cb779f","modified":1492086403796},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491989097400},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"f8350122f526d1486856eaec2a2bc40a2a3a6df1","modified":1491989097400},{"_id":"themes/BlueLake/.git/objects/pack/pack-c78babc38c615104f9f0b9ab8e1eeca0ff1244b7.pack","hash":"550af370cd318a7d407a71a1bf6ecab08773cdc6","modified":1491989097332},{"_id":"public/content.json","hash":"8e165d98bae2e5cd0a7b3827c8762eded1217fa1","modified":1492139527124},{"_id":"public/about/index.html","hash":"e4e2e607e1a9ff80a2a0ac39b4a3301a3b8db7fe","modified":1492139527139},{"_id":"public/2017/04/12/写在前面的话/index.html","hash":"01d7bd696d1cb570be0442b87065b7b39b5b4d67","modified":1492139527139},{"_id":"public/2017/04/13/我对代码的理解/index.html","hash":"a92b21c96a0618107502d2c2334aaed5e7d97916","modified":1492139527139},{"_id":"public/2017/04/13/Servlet与JSP/index.html","hash":"cde3e79fbb9b028317d23fb4409439f00ef6690d","modified":1492139527139},{"_id":"public/categories/Java/index.html","hash":"c80576dff80ef3688baaaa0a6faf0004ffc0c175","modified":1492139527139},{"_id":"public/categories/杂谈/index.html","hash":"40c52ea284dbd9b93a94eb7e9e7c7a006815131b","modified":1492139527139},{"_id":"public/categories/网络/index.html","hash":"f5d231c04b2df701f7693ba5e07bcd3d887c1fb3","modified":1492139527155},{"_id":"public/archives/index.html","hash":"8fc8be8b72b58731f3270e35c3a49a702b103cb3","modified":1492139527155},{"_id":"public/archives/2017/index.html","hash":"8fc8be8b72b58731f3270e35c3a49a702b103cb3","modified":1492139527155},{"_id":"public/tags/JavaWeb/index.html","hash":"009c8c30d37e2ad413d0ba166a85b2c5dd199598","modified":1492139527155},{"_id":"public/tags/代码/index.html","hash":"02188edc5e720195d598b5f360093d53012d6da0","modified":1492139527155},{"_id":"public/tags/生活/index.html","hash":"444796fa9366286db00d8fa22c09a723a440a023","modified":1492139527155},{"_id":"public/index.html","hash":"001193d859597a46c56ad6d3b068cea51fbcd5d5","modified":1492139527155},{"_id":"public/2017/04/14/Http协议/index.html","hash":"d94b9f6de1b6b4790bccdd106c28f8e015150299","modified":1492139527155},{"_id":"public/2017/04/14/HttpClient/index.html","hash":"83a887193c8518825f249973bdccf48936df830d","modified":1492139527155},{"_id":"public/tags/协议/index.html","hash":"acd01e2c0893c6a50274326d04f3710cdfefd7c5","modified":1492139527155},{"_id":"public/archives/2017/04/index.html","hash":"8fc8be8b72b58731f3270e35c3a49a702b103cb3","modified":1492139527155}],"Category":[{"name":"Java","_id":"cj1h9ap1p0003z0luu55oexdj"},{"name":"网络","_id":"cj1h9ap1p0008z0luw8ejf3g9"},{"name":"杂谈","_id":"cj1h9ap24000gz0luksltca7f"}],"Data":[],"Page":[{"title":"about","date":"2017-04-13T11:13:32.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-13 19:13:32\n---\n","updated":"2017-04-13T11:13:32.632Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1h9ap1p0001z0lu7mc4u1gs","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HttpClient","date":"2017-04-14T02:56:56.000Z","_content":"# 1. 简介\nHttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。\n\n使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 \n1. 创建HttpClient对象。\n2. 创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。\n3. 如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。\n4. 调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。\n5. 调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。\n6. 释放连接。无论执行方法是否成功，都必须释放连接\n\n```java\nimport org.apache.commons.httpclient.*;\nimport org.apache.commons.httpclient.methods.*;\nimport org.apache.commons.httpclient.params.HttpMethodParams;\n\nimport java.io.*;\n\npublic class HttpClientTutorial {\n  \n  private static String url = \"http://www.apache.org/\";\n\n  public static void main(String[] args) {\n    // 创建HttpClient对象\n    HttpClient client = new HttpClient();\n\n    // 创建请求方法的实例\n    GetMethod method = new GetMethod(url);\n    \n    // 请求参数\n    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, \n    \t\tnew DefaultHttpMethodRetryHandler(3, false));\n\n    try {\n      // Execute the method.\n      int statusCode = client.executeMethod(method);\n\n      if (statusCode != HttpStatus.SC_OK) {\n        System.err.println(\"Method failed: \" + method.getStatusLine());\n      }\n\n      // Read the response body.\n      byte[] responseBody = method.getResponseBody();\n\n      // Deal with the response.\n      // Use caution: ensure correct character encoding and is not binary data\n      System.out.println(new String(responseBody));\n\n    } catch (HttpException e) {\n      System.err.println(\"Fatal protocol violation: \" + e.getMessage());\n      e.printStackTrace();\n    } catch (IOException e) {\n      System.err.println(\"Fatal transport error: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // Release the connection.\n      method.releaseConnection();\n    }  \n  }\n}\n```","source":"_posts/HttpClient.md","raw":"---\ntitle: HttpClient\ndate: 2017-04-14 10:56:56\ncategory: Java\ntags: JavaWeb\n---\n# 1. 简介\nHttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。\n\n使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 \n1. 创建HttpClient对象。\n2. 创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。\n3. 如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。\n4. 调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。\n5. 调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。\n6. 释放连接。无论执行方法是否成功，都必须释放连接\n\n```java\nimport org.apache.commons.httpclient.*;\nimport org.apache.commons.httpclient.methods.*;\nimport org.apache.commons.httpclient.params.HttpMethodParams;\n\nimport java.io.*;\n\npublic class HttpClientTutorial {\n  \n  private static String url = \"http://www.apache.org/\";\n\n  public static void main(String[] args) {\n    // 创建HttpClient对象\n    HttpClient client = new HttpClient();\n\n    // 创建请求方法的实例\n    GetMethod method = new GetMethod(url);\n    \n    // 请求参数\n    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, \n    \t\tnew DefaultHttpMethodRetryHandler(3, false));\n\n    try {\n      // Execute the method.\n      int statusCode = client.executeMethod(method);\n\n      if (statusCode != HttpStatus.SC_OK) {\n        System.err.println(\"Method failed: \" + method.getStatusLine());\n      }\n\n      // Read the response body.\n      byte[] responseBody = method.getResponseBody();\n\n      // Deal with the response.\n      // Use caution: ensure correct character encoding and is not binary data\n      System.out.println(new String(responseBody));\n\n    } catch (HttpException e) {\n      System.err.println(\"Fatal protocol violation: \" + e.getMessage());\n      e.printStackTrace();\n    } catch (IOException e) {\n      System.err.println(\"Fatal transport error: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n      // Release the connection.\n      method.releaseConnection();\n    }  \n  }\n}\n```","slug":"HttpClient","published":1,"updated":"2017-04-14T03:10:21.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1h9ap190000z0luu9lxip6e","content":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h1><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。</p>\n<p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 </p>\n<ol>\n<li>创建HttpClient对象。</li>\n<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</li>\n<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</li>\n<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</li>\n<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</li>\n<li>释放连接。无论执行方法是否成功，都必须释放连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.methods.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.params.HttpMethodParams;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientTutorial</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"http://www.apache.org/\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建HttpClient对象</span></div><div class=\"line\">    HttpClient client = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建请求方法的实例</span></div><div class=\"line\">    GetMethod method = <span class=\"keyword\">new</span> GetMethod(url);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 请求参数</span></div><div class=\"line\">    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, </div><div class=\"line\">    \t\t<span class=\"keyword\">new</span> DefaultHttpMethodRetryHandler(<span class=\"number\">3</span>, <span class=\"keyword\">false</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Execute the method.</span></div><div class=\"line\">      <span class=\"keyword\">int</span> statusCode = client.executeMethod(method);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (statusCode != HttpStatus.SC_OK) &#123;</div><div class=\"line\">        System.err.println(<span class=\"string\">\"Method failed: \"</span> + method.getStatusLine());</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Read the response body.</span></div><div class=\"line\">      <span class=\"keyword\">byte</span>[] responseBody = method.getResponseBody();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Deal with the response.</span></div><div class=\"line\">      <span class=\"comment\">// Use caution: ensure correct character encoding and is not binary data</span></div><div class=\"line\">      System.out.println(<span class=\"keyword\">new</span> String(responseBody));</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpException e) &#123;</div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal protocol violation: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal transport error: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Release the connection.</span></div><div class=\"line\">      method.releaseConnection();</div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h1><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。</p>\n<p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 </p>\n<ol>\n<li>创建HttpClient对象。</li>\n<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</li>\n<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</li>\n<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</li>\n<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</li>\n<li>释放连接。无论执行方法是否成功，都必须释放连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.methods.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.params.HttpMethodParams;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientTutorial</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"http://www.apache.org/\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建HttpClient对象</span></div><div class=\"line\">    HttpClient client = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建请求方法的实例</span></div><div class=\"line\">    GetMethod method = <span class=\"keyword\">new</span> GetMethod(url);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 请求参数</span></div><div class=\"line\">    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, </div><div class=\"line\">    \t\t<span class=\"keyword\">new</span> DefaultHttpMethodRetryHandler(<span class=\"number\">3</span>, <span class=\"keyword\">false</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Execute the method.</span></div><div class=\"line\">      <span class=\"keyword\">int</span> statusCode = client.executeMethod(method);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (statusCode != HttpStatus.SC_OK) &#123;</div><div class=\"line\">        System.err.println(<span class=\"string\">\"Method failed: \"</span> + method.getStatusLine());</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Read the response body.</span></div><div class=\"line\">      <span class=\"keyword\">byte</span>[] responseBody = method.getResponseBody();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Deal with the response.</span></div><div class=\"line\">      <span class=\"comment\">// Use caution: ensure correct character encoding and is not binary data</span></div><div class=\"line\">      System.out.println(<span class=\"keyword\">new</span> String(responseBody));</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpException e) &#123;</div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal protocol violation: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal transport error: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Release the connection.</span></div><div class=\"line\">      method.releaseConnection();</div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Http协议","date":"2017-04-14T02:43:19.000Z","_content":"\n大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。\n\n## 1、Http简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n\n![image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB][1]\n\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\n\nHTTP默认端口号为80，Https的默认端口为443。\n\n![image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB][2]\n\n### 特点\n\n1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n\n2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n\n3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n\n4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n\n5、支持B/S及C/S模式。\n\n### TCP & HTTP & UDP:\n\nTCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。\n\n|网络层|所包含协议|\n|---|---|\n|网络层|IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议|\n|传输层|TCP协议、UDP协议|\n|应用层|有FTP、HTTP、TELNET、SMTP、DNS等协议|\n\n因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。\n\n### socket\nsocket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。\n\nsocket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。\n\n## 2.Http消息\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。\n### URL和URI区别\n|URI|URL|\n|---|---|\n|URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。|URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。|\n|Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的|采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等|\n|URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。|URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等|\n\n例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：\n\n1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;\n\n2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;\n\n3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;\n\n4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;\n\n5、释放 TCP连接;\n\n6、浏览器将该 html 文本并显示内容; 　　\n\n### 客户端请求消息\n客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。\n![image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB][3]\n\n#### Get请求\n```\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept    image/webp,image/*,*/*;q=0.8\nReferer    http://www.imooc.com/\nAccept-Encoding    gzip, deflate, sdch\nAccept-Language    zh-CN,zh;q=0.8\n```\n第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.\n\nGET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。\n\n第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息\n\n从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等\n\n第三部分：空行，请求头部后面的空行是必须的\n\n即使第四部分的请求数据为空，也必须有空行。\n\n第四部分：请求数据也叫主体，可以添加任意的其他数据。\n\n这个例子的请求数据为空。\n\n#### post请求\n```\nPOST / HTTP1.1\nHost:www.wrox.com\nUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type:application/x-www-form-urlencoded\nContent-Length:40\nConnection: Keep-Alive\n\nname=Professional%20Ajax&publisher=Wiley\n```\n第一部分：请求行，第一行明了是post请求，以及http1.1版本。\n第二部分：请求头部，第二行至第六行。\n第三部分：空行，第七行的空行。\n第四部分：请求数据，第八行。\n\n### 响应消息Response\n\nHTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。\n![image_1bdbg60ceq2slf71po2416m781g.png-110.7kB][4]\n\n## 3、请求方法和状态码\n### 请求方法\n根据HTTP标准，HTTP请求可以使用多种请求方法。\nHTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\nHTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n|序号|方法|描述|\n|---|---|---|\n|1|   GET\t|请求指定的页面信息，并返回实体主体。|\n|2|\tHEAD\t类|似于get请求，只不过返回的响应中没有具体的内容，用于获取报头|\n|3|\tPOST\t向|指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。|\n|4|\tPUT\t从客|户端向服务器传送的数据取代指定的文档的内容。|\n|5|\tDELETE|\t请求服务器删除指定的页面。|\n|6|CONNECT|\tHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。|\n|7|\tOPTION|S\t允许客户端查看服务器的性能。|\n|8|\tTRACE\t|回显服务器收到的请求，主要用于测试或诊断。|\n\n### 状态码\n当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。\nHTTP状态码的英文为HTTP Status Code。\n\n|分类\t|分类描述|\n|---|---|\n|1**|\t信息，服务器收到请求，需要请求者继续执行操作|\n|2**|\t成功，操作被成功接收并处理|\n|3**|\t重定向，需要进一步的操作以完成请求|\n|4**|\t客户端错误，请求包含语法错误或无法完成请求|\n|5**|\t服务器错误，服务器在处理请求的过程中发生了错误|\n\n常见的状态码\n```\n200 OK                        //客户端请求成功\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 \n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n```\n### HTTP content-type\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。\n\n### HTTP 响应头信息\nHTTP请求头提供了关于请求，响应或者其他的发送实体的信息。\n\n|应答头|说明|\n|---|---|\n|Allow|\t服务器支持哪些请求方法（如GET、POST等）。|\n|Content-Encoding|\t文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(\"Accept-Encoding\")）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。|\n|Content-Length\t|表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。|\n|Content-Type|\t表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。|\n|Date|\t当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。|\n|Expires|\t应该在什么时候认为文档已经过期，从而不再缓存它？|\n|Last-Modified|\t文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。|\n|Location|\t表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。|\n|Refresh\t|表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(\"Refresh\", \"5; URL=http://host/path\")让浏览器读取指定的页面。 |\n|Server|\t服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。|\n|Set-Cookie|\t设置和页面关联的Cookie。Servlet不应使用response.setHeader(\"Set-Cookie\", ...)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。|\n|WWW-Authenticate\t|客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(\"WWW-Authenticate\", \"BASIC realm=＼\"executives＼\"\")。 |\n\n## 4、补充\n### get和post区别\n\n* GET在浏览器回退时是无害的，而POST会再次提交请求。\n\n* GET产生的URL地址可以被Bookmark，而POST不可以。\n\n* GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n\n* GET请求只能进行url编码，而POST支持多种编码方式。\n\n* GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n\n* GET请求在URL中传送的参数是有长度限制的，而POST么有。\n\n* 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n\n* GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n\n* GET参数通过URL传递，POST放在Request body中。\n\n\n**GET和POST还有一个重大区别：**\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n\n因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？\n1. GET与POST都有自己的语义，不能随便混用。\n2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。\n3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。\n\n### Https\nHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。\n\n不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。\n>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。\n（2） 篡改风险（tampering）：第三方可以修改通信内容。\n（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。\n\nSSL/TLS协议是为了解决这三大风险而设计的，希望达到：\n>（1） 所有信息都是加密传播，第三方无法窃听。\n（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。\n（3） 配备身份证书，防止身份被冒充。\n\n![image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB][5]\n\n\n\n\n**参考文章**\n[1、HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n[2、HTTP 教程](http://www.runoob.com/http/http-intro.html)\n[3、看完还不懂HTTPS我直播吃翔](http://www.shellsec.com/news/38129.html)\n\n\n  [1]: http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\n  [2]: http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\n  [3]: http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\n  [4]: http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\n  [5]: http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png","source":"_posts/Http协议.md","raw":"---\ntitle: Http协议\ndate: 2017-04-14 10:43:19\ncategory: 网络\ntags: 协议\n---\n\n大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。\n\n## 1、Http简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n\n![image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB][1]\n\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\n\nHTTP默认端口号为80，Https的默认端口为443。\n\n![image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB][2]\n\n### 特点\n\n1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n\n2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n\n3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n\n4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n\n5、支持B/S及C/S模式。\n\n### TCP & HTTP & UDP:\n\nTCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。\n\n|网络层|所包含协议|\n|---|---|\n|网络层|IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议|\n|传输层|TCP协议、UDP协议|\n|应用层|有FTP、HTTP、TELNET、SMTP、DNS等协议|\n\n因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。\n\n### socket\nsocket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。\n\nsocket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。\n\n## 2.Http消息\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。\n### URL和URI区别\n|URI|URL|\n|---|---|\n|URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。|URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。|\n|Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的|采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等|\n|URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。|URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等|\n\n例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：\n\n1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;\n\n2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;\n\n3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;\n\n4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;\n\n5、释放 TCP连接;\n\n6、浏览器将该 html 文本并显示内容; 　　\n\n### 客户端请求消息\n客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。\n![image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB][3]\n\n#### Get请求\n```\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept    image/webp,image/*,*/*;q=0.8\nReferer    http://www.imooc.com/\nAccept-Encoding    gzip, deflate, sdch\nAccept-Language    zh-CN,zh;q=0.8\n```\n第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.\n\nGET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。\n\n第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息\n\n从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等\n\n第三部分：空行，请求头部后面的空行是必须的\n\n即使第四部分的请求数据为空，也必须有空行。\n\n第四部分：请求数据也叫主体，可以添加任意的其他数据。\n\n这个例子的请求数据为空。\n\n#### post请求\n```\nPOST / HTTP1.1\nHost:www.wrox.com\nUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type:application/x-www-form-urlencoded\nContent-Length:40\nConnection: Keep-Alive\n\nname=Professional%20Ajax&publisher=Wiley\n```\n第一部分：请求行，第一行明了是post请求，以及http1.1版本。\n第二部分：请求头部，第二行至第六行。\n第三部分：空行，第七行的空行。\n第四部分：请求数据，第八行。\n\n### 响应消息Response\n\nHTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。\n![image_1bdbg60ceq2slf71po2416m781g.png-110.7kB][4]\n\n## 3、请求方法和状态码\n### 请求方法\n根据HTTP标准，HTTP请求可以使用多种请求方法。\nHTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\nHTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n|序号|方法|描述|\n|---|---|---|\n|1|   GET\t|请求指定的页面信息，并返回实体主体。|\n|2|\tHEAD\t类|似于get请求，只不过返回的响应中没有具体的内容，用于获取报头|\n|3|\tPOST\t向|指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。|\n|4|\tPUT\t从客|户端向服务器传送的数据取代指定的文档的内容。|\n|5|\tDELETE|\t请求服务器删除指定的页面。|\n|6|CONNECT|\tHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。|\n|7|\tOPTION|S\t允许客户端查看服务器的性能。|\n|8|\tTRACE\t|回显服务器收到的请求，主要用于测试或诊断。|\n\n### 状态码\n当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。\nHTTP状态码的英文为HTTP Status Code。\n\n|分类\t|分类描述|\n|---|---|\n|1**|\t信息，服务器收到请求，需要请求者继续执行操作|\n|2**|\t成功，操作被成功接收并处理|\n|3**|\t重定向，需要进一步的操作以完成请求|\n|4**|\t客户端错误，请求包含语法错误或无法完成请求|\n|5**|\t服务器错误，服务器在处理请求的过程中发生了错误|\n\n常见的状态码\n```\n200 OK                        //客户端请求成功\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 \n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n```\n### HTTP content-type\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。\n\n### HTTP 响应头信息\nHTTP请求头提供了关于请求，响应或者其他的发送实体的信息。\n\n|应答头|说明|\n|---|---|\n|Allow|\t服务器支持哪些请求方法（如GET、POST等）。|\n|Content-Encoding|\t文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(\"Accept-Encoding\")）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。|\n|Content-Length\t|表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。|\n|Content-Type|\t表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。|\n|Date|\t当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。|\n|Expires|\t应该在什么时候认为文档已经过期，从而不再缓存它？|\n|Last-Modified|\t文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。|\n|Location|\t表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。|\n|Refresh\t|表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(\"Refresh\", \"5; URL=http://host/path\")让浏览器读取指定的页面。 |\n|Server|\t服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。|\n|Set-Cookie|\t设置和页面关联的Cookie。Servlet不应使用response.setHeader(\"Set-Cookie\", ...)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。|\n|WWW-Authenticate\t|客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(\"WWW-Authenticate\", \"BASIC realm=＼\"executives＼\"\")。 |\n\n## 4、补充\n### get和post区别\n\n* GET在浏览器回退时是无害的，而POST会再次提交请求。\n\n* GET产生的URL地址可以被Bookmark，而POST不可以。\n\n* GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n\n* GET请求只能进行url编码，而POST支持多种编码方式。\n\n* GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n\n* GET请求在URL中传送的参数是有长度限制的，而POST么有。\n\n* 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n\n* GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n\n* GET参数通过URL传递，POST放在Request body中。\n\n\n**GET和POST还有一个重大区别：**\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n\n因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？\n1. GET与POST都有自己的语义，不能随便混用。\n2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。\n3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。\n\n### Https\nHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。\n\n不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。\n>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。\n（2） 篡改风险（tampering）：第三方可以修改通信内容。\n（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。\n\nSSL/TLS协议是为了解决这三大风险而设计的，希望达到：\n>（1） 所有信息都是加密传播，第三方无法窃听。\n（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。\n（3） 配备身份证书，防止身份被冒充。\n\n![image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB][5]\n\n\n\n\n**参考文章**\n[1、HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n[2、HTTP 教程](http://www.runoob.com/http/http-intro.html)\n[3、看完还不懂HTTPS我直播吃翔](http://www.shellsec.com/news/38129.html)\n\n\n  [1]: http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\n  [2]: http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\n  [3]: http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\n  [4]: http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\n  [5]: http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png","slug":"Http协议","published":1,"updated":"2017-04-14T02:57:23.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1h9ap1p0002z0lu7u45yd8b","content":"<p>大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。</p>\n<h2 id=\"1、Http简介\"><a href=\"#1、Http简介\" class=\"headerlink\" title=\"1、Http简介\"></a>1、Http简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\" alt=\"image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB\"></p>\n<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n<p>HTTP默认端口号为80，Https的默认端口为443。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\" alt=\"image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>\n<p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>\n<p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>\n<p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>\n<p>5、支持B/S及C/S模式。</p>\n<h3 id=\"TCP-amp-HTTP-amp-UDP\"><a href=\"#TCP-amp-HTTP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; HTTP &amp; UDP:\"></a>TCP &amp; HTTP &amp; UDP:</h3><p>TCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>网络层</th>\n<th>所包含协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络层</td>\n<td>IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP协议、UDP协议</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>有FTP、HTTP、TELNET、SMTP、DNS等协议</td>\n</tr>\n</tbody>\n</table>\n<p>因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。</p>\n<h3 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h3><p>socket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。</p>\n<p>socket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。</p>\n<h2 id=\"2-Http消息\"><a href=\"#2-Http消息\" class=\"headerlink\" title=\"2.Http消息\"></a>2.Http消息</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p>\n<h3 id=\"URL和URI区别\"><a href=\"#URL和URI区别\" class=\"headerlink\" title=\"URL和URI区别\"></a>URL和URI区别</h3><table>\n<thead>\n<tr>\n<th>URI</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</td>\n<td>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</td>\n</tr>\n<tr>\n<td>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</td>\n<td>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等</td>\n</tr>\n<tr>\n<td>URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。</td>\n<td>URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等</td>\n</tr>\n</tbody>\n</table>\n<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>\n<p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p>\n<p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</p>\n<p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p>\n<p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p>\n<p>5、释放 TCP连接;</p>\n<p>6、浏览器将该 html 文本并显示内容; 　　</p>\n<h3 id=\"客户端请求消息\"><a href=\"#客户端请求消息\" class=\"headerlink\" title=\"客户端请求消息\"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。<br><img src=\"http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\" alt=\"image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB\"></p>\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /562f25980001b1b106000338.jpg HTTP/1.1</div><div class=\"line\">Host    img.mukewang.com</div><div class=\"line\">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class=\"line\">Accept    image/webp,image/*,*/*;q=0.8</div><div class=\"line\">Referer    http://www.imooc.com/</div><div class=\"line\">Accept-Encoding    gzip, deflate, sdch</div><div class=\"line\">Accept-Language    zh-CN,zh;q=0.8</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</p>\n<p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p>\n<p>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</p>\n<p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p>\n<p>第三部分：空行，请求头部后面的空行是必须的</p>\n<p>即使第四部分的请求数据为空，也必须有空行。</p>\n<p>第四部分：请求数据也叫主体，可以添加任意的其他数据。</p>\n<p>这个例子的请求数据为空。</p>\n<h4 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST / HTTP1.1</div><div class=\"line\">Host:www.wrox.com</div><div class=\"line\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</div><div class=\"line\">Content-Type:application/x-www-form-urlencoded</div><div class=\"line\">Content-Length:40</div><div class=\"line\">Connection: Keep-Alive</div><div class=\"line\"></div><div class=\"line\">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>第二部分：请求头部，第二行至第六行。<br>第三部分：空行，第七行的空行。<br>第四部分：请求数据，第八行。</p>\n<h3 id=\"响应消息Response\"><a href=\"#响应消息Response\" class=\"headerlink\" title=\"响应消息Response\"></a>响应消息Response</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br><img src=\"http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\" alt=\"image_1bdbg60ceq2slf71po2416m781g.png-110.7kB\"></p>\n<h2 id=\"3、请求方法和状态码\"><a href=\"#3、请求方法和状态码\" class=\"headerlink\" title=\"3、请求方法和状态码\"></a>3、请求方法和状态码</h2><h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD    类</td>\n<td>似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td>POST    向</td>\n<td>指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT    从客</td>\n<td>户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTION</td>\n<td>S    允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。<br>HTTP状态码的英文为HTTP Status Code。</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>分类描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1**</td>\n<td>信息，服务器收到请求，需要请求者继续执行操作</td>\n</tr>\n<tr>\n<td>2**</td>\n<td>成功，操作被成功接收并处理</td>\n</tr>\n<tr>\n<td>3**</td>\n<td>重定向，需要进一步的操作以完成请求</td>\n</tr>\n<tr>\n<td>4**</td>\n<td>客户端错误，请求包含语法错误或无法完成请求</td>\n</tr>\n<tr>\n<td>5**</td>\n<td>服务器错误，服务器在处理请求的过程中发生了错误</td>\n</tr>\n</tbody>\n</table>\n<p>常见的状态码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">200 OK                        //客户端请求成功</div><div class=\"line\">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </div><div class=\"line\">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</div><div class=\"line\">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</div><div class=\"line\">500 Internal Server Error     //服务器发生不可预期的错误</div><div class=\"line\">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</div></pre></td></tr></table></figure></p>\n<h3 id=\"HTTP-content-type\"><a href=\"#HTTP-content-type\" class=\"headerlink\" title=\"HTTP content-type\"></a>HTTP content-type</h3><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。</p>\n<h3 id=\"HTTP-响应头信息\"><a href=\"#HTTP-响应头信息\" class=\"headerlink\" title=\"HTTP 响应头信息\"></a>HTTP 响应头信息</h3><p>HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。</p>\n<table>\n<thead>\n<tr>\n<th>应答头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allow</td>\n<td>服务器支持哪些请求方法（如GET、POST等）。</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>应该在什么时候认为文档已经过期，从而不再缓存它？</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href=\"http://host/path&quot;)让浏览器读取指定的页面。\" target=\"_blank\" rel=\"external\">http://host/path&quot;)让浏览器读取指定的页面。</a></td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4、补充\"><a href=\"#4、补充\" class=\"headerlink\" title=\"4、补充\"></a>4、补充</h2><h3 id=\"get和post区别\"><a href=\"#get和post区别\" class=\"headerlink\" title=\"get和post区别\"></a>get和post区别</h3><ul>\n<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>\n</li>\n<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>\n</li>\n<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>\n</li>\n<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>\n</li>\n<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>\n</li>\n<li><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p>\n</li>\n<li><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p>\n</li>\n<li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>\n</li>\n<li><p>GET参数通过URL传递，POST放在Request body中。</p>\n</li>\n</ul>\n<p><strong>GET和POST还有一个重大区别：</strong></p>\n<p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>\n<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>\n<p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p>\n<ol>\n<li>GET与POST都有自己的语义，不能随便混用。</li>\n<li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li>\n<li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li>\n</ol>\n<h3 id=\"Https\"><a href=\"#Https\" class=\"headerlink\" title=\"Https\"></a>Https</h3><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p>\n<p>不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。</p>\n<blockquote>\n<p>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。<br>（2） 篡改风险（tampering）：第三方可以修改通信内容。<br>（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。</p>\n</blockquote>\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>\n<blockquote>\n<p>（1） 所有信息都是加密传播，第三方无法窃听。<br>（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。<br>（3） 配备身份证书，防止身份被冒充。</p>\n</blockquote>\n<p><img src=\"http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png\" alt=\"image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB\"></p>\n<p><strong>参考文章</strong><br><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"external\">1、HTTP 协议入门</a><br><a href=\"http://www.runoob.com/http/http-intro.html\" target=\"_blank\" rel=\"external\">2、HTTP 教程</a><br><a href=\"http://www.shellsec.com/news/38129.html\" target=\"_blank\" rel=\"external\">3、看完还不懂HTTPS我直播吃翔</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。</p>\n<h2 id=\"1、Http简介\"><a href=\"#1、Http简介\" class=\"headerlink\" title=\"1、Http简介\"></a>1、Http简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\" alt=\"image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB\"></p>\n<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n<p>HTTP默认端口号为80，Https的默认端口为443。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\" alt=\"image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>\n<p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>\n<p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>\n<p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>\n<p>5、支持B/S及C/S模式。</p>\n<h3 id=\"TCP-amp-HTTP-amp-UDP\"><a href=\"#TCP-amp-HTTP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; HTTP &amp; UDP:\"></a>TCP &amp; HTTP &amp; UDP:</h3><p>TCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>网络层</th>\n<th>所包含协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络层</td>\n<td>IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP协议、UDP协议</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>有FTP、HTTP、TELNET、SMTP、DNS等协议</td>\n</tr>\n</tbody>\n</table>\n<p>因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。</p>\n<h3 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h3><p>socket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。</p>\n<p>socket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。</p>\n<h2 id=\"2-Http消息\"><a href=\"#2-Http消息\" class=\"headerlink\" title=\"2.Http消息\"></a>2.Http消息</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p>\n<h3 id=\"URL和URI区别\"><a href=\"#URL和URI区别\" class=\"headerlink\" title=\"URL和URI区别\"></a>URL和URI区别</h3><table>\n<thead>\n<tr>\n<th>URI</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</td>\n<td>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</td>\n</tr>\n<tr>\n<td>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</td>\n<td>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等</td>\n</tr>\n<tr>\n<td>URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。</td>\n<td>URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等</td>\n</tr>\n</tbody>\n</table>\n<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>\n<p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p>\n<p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</p>\n<p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p>\n<p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p>\n<p>5、释放 TCP连接;</p>\n<p>6、浏览器将该 html 文本并显示内容; 　　</p>\n<h3 id=\"客户端请求消息\"><a href=\"#客户端请求消息\" class=\"headerlink\" title=\"客户端请求消息\"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。<br><img src=\"http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\" alt=\"image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB\"></p>\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /562f25980001b1b106000338.jpg HTTP/1.1</div><div class=\"line\">Host    img.mukewang.com</div><div class=\"line\">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class=\"line\">Accept    image/webp,image/*,*/*;q=0.8</div><div class=\"line\">Referer    http://www.imooc.com/</div><div class=\"line\">Accept-Encoding    gzip, deflate, sdch</div><div class=\"line\">Accept-Language    zh-CN,zh;q=0.8</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</p>\n<p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p>\n<p>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</p>\n<p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p>\n<p>第三部分：空行，请求头部后面的空行是必须的</p>\n<p>即使第四部分的请求数据为空，也必须有空行。</p>\n<p>第四部分：请求数据也叫主体，可以添加任意的其他数据。</p>\n<p>这个例子的请求数据为空。</p>\n<h4 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST / HTTP1.1</div><div class=\"line\">Host:www.wrox.com</div><div class=\"line\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</div><div class=\"line\">Content-Type:application/x-www-form-urlencoded</div><div class=\"line\">Content-Length:40</div><div class=\"line\">Connection: Keep-Alive</div><div class=\"line\"></div><div class=\"line\">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>第二部分：请求头部，第二行至第六行。<br>第三部分：空行，第七行的空行。<br>第四部分：请求数据，第八行。</p>\n<h3 id=\"响应消息Response\"><a href=\"#响应消息Response\" class=\"headerlink\" title=\"响应消息Response\"></a>响应消息Response</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br><img src=\"http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\" alt=\"image_1bdbg60ceq2slf71po2416m781g.png-110.7kB\"></p>\n<h2 id=\"3、请求方法和状态码\"><a href=\"#3、请求方法和状态码\" class=\"headerlink\" title=\"3、请求方法和状态码\"></a>3、请求方法和状态码</h2><h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD    类</td>\n<td>似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td>POST    向</td>\n<td>指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT    从客</td>\n<td>户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTION</td>\n<td>S    允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。<br>HTTP状态码的英文为HTTP Status Code。</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>分类描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1**</td>\n<td>信息，服务器收到请求，需要请求者继续执行操作</td>\n</tr>\n<tr>\n<td>2**</td>\n<td>成功，操作被成功接收并处理</td>\n</tr>\n<tr>\n<td>3**</td>\n<td>重定向，需要进一步的操作以完成请求</td>\n</tr>\n<tr>\n<td>4**</td>\n<td>客户端错误，请求包含语法错误或无法完成请求</td>\n</tr>\n<tr>\n<td>5**</td>\n<td>服务器错误，服务器在处理请求的过程中发生了错误</td>\n</tr>\n</tbody>\n</table>\n<p>常见的状态码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">200 OK                        //客户端请求成功</div><div class=\"line\">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </div><div class=\"line\">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</div><div class=\"line\">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</div><div class=\"line\">500 Internal Server Error     //服务器发生不可预期的错误</div><div class=\"line\">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</div></pre></td></tr></table></figure></p>\n<h3 id=\"HTTP-content-type\"><a href=\"#HTTP-content-type\" class=\"headerlink\" title=\"HTTP content-type\"></a>HTTP content-type</h3><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。</p>\n<h3 id=\"HTTP-响应头信息\"><a href=\"#HTTP-响应头信息\" class=\"headerlink\" title=\"HTTP 响应头信息\"></a>HTTP 响应头信息</h3><p>HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。</p>\n<table>\n<thead>\n<tr>\n<th>应答头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allow</td>\n<td>服务器支持哪些请求方法（如GET、POST等）。</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>应该在什么时候认为文档已经过期，从而不再缓存它？</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href=\"http://host/path&quot;)让浏览器读取指定的页面。\">http://host/path&quot;)让浏览器读取指定的页面。</a></td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4、补充\"><a href=\"#4、补充\" class=\"headerlink\" title=\"4、补充\"></a>4、补充</h2><h3 id=\"get和post区别\"><a href=\"#get和post区别\" class=\"headerlink\" title=\"get和post区别\"></a>get和post区别</h3><ul>\n<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>\n</li>\n<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>\n</li>\n<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>\n</li>\n<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>\n</li>\n<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>\n</li>\n<li><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p>\n</li>\n<li><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p>\n</li>\n<li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>\n</li>\n<li><p>GET参数通过URL传递，POST放在Request body中。</p>\n</li>\n</ul>\n<p><strong>GET和POST还有一个重大区别：</strong></p>\n<p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>\n<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>\n<p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p>\n<ol>\n<li>GET与POST都有自己的语义，不能随便混用。</li>\n<li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li>\n<li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li>\n</ol>\n<h3 id=\"Https\"><a href=\"#Https\" class=\"headerlink\" title=\"Https\"></a>Https</h3><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p>\n<p>不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。</p>\n<blockquote>\n<p>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。<br>（2） 篡改风险（tampering）：第三方可以修改通信内容。<br>（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。</p>\n</blockquote>\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>\n<blockquote>\n<p>（1） 所有信息都是加密传播，第三方无法窃听。<br>（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。<br>（3） 配备身份证书，防止身份被冒充。</p>\n</blockquote>\n<p><img src=\"http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png\" alt=\"image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB\"></p>\n<p><strong>参考文章</strong><br><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">1、HTTP 协议入门</a><br><a href=\"http://www.runoob.com/http/http-intro.html\">2、HTTP 教程</a><br><a href=\"http://www.shellsec.com/news/38129.html\">3、看完还不懂HTTPS我直播吃翔</a></p>\n"},{"title":"Servlet","date":"2017-04-13T07:33:26.000Z","_content":"\n在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。\n\n## 1. Servlet的生命周期\n服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。\n首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。\n\nServlet架构图如下：\n\n![Servlet生命周期](Servlet与JSP/ServletLifeCycle.jpg)\n\n\n* 第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。\n* Servlet 容器在调用 service() 方法之前加载 Servlet。\n* 然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。\n\n## 2. 状态代码\nWeb服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。\n\n### 设置状态代码：setStatus\n> 在向客户程序发送任何文档内容之前设置状态代码\n\n\nsetStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。\n\nHttp1.1中可用的特定的状态代码，如下\n\n|代码区间|描述|\n|---|---|\n|100-199|都是信息性的，标示客户应该采取的其他动作|\n|200-299|标示请求成功|\n|300-399|用于已移走的文件，常常包括Location报头，指出新的地址|\n|400-499|表明由客户引发的错误|\n|500-599|表示由服务器引发的错误|\n\n## Http相应报头\n\n指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。\n\n```java\n setHeader（String headerName,String headerValue） \n```\nHttp允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。\n\n## 3. 过滤器\nServlet过滤器可以动态的拦截请求和响应，可以实现以下目的：\n\n* 在客户端请求访问后端资源之前，拦截请求\n* 在服务端的响应发送客户端之前，处理响应\n\n### 3.1 过滤器接口\n过滤器是实现`javax.servlet.Filter`接口的类。接口包含以下三个方法：\n![Filter interface](Servlet与JSP/filter.png)\n\n过滤器示例：\n```java\n//导入必需的 java 库\nimport javax.servlet.*;\nimport java.util.*;\n//实现 Filter 类\npublic class LogFilter implements Filter  {\n\tpublic void  init(FilterConfig config) throws ServletException {\n\t\t// 获取初始化参数\n\t\tString site = config.getInitParameter(\"Site\"); \n\t\t// 输出初始化参数\n\t\tSystem.out.println(\"网站名称: \" + site); \n\t}\n\tpublic void  doFilter(ServletRequest request, ServletResponse response, FilterChain chain){\n\t\t// 输出站点名称\n\t\tSystem.out.println(\"站点网址：http://www.runoob.com\");\n\t\t// 把请求传回过滤链\n\t\tchain.doFilter(request,response);\n\t}\n\tpublic void destroy( ){\n\t\t/* 在 Filter 实例被 Web 容器从服务移除之前调用 */\n\t}\n}\n```\n\n### 3.2 过滤器实现\n```xml\n<filter>\n\t<filter-name>LoginFilter</filter-name>\n\t<filter-class>com.runoob.test.LogFilter</filter-class>\n\t<init-param>\n\t\t<param-name>Site</param-name>\n\t\t<param-value>菜鸟教程</param-value>\n\t</init-param>\n</filter>\n```","source":"_posts/Servlet与JSP.md","raw":"---\ntitle: Servlet\ndate: 2017-04-13 15:33:26\ncategory: Java\ntags: JavaWeb\n---\n\n在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。\n\n## 1. Servlet的生命周期\n服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。\n首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。\n\nServlet架构图如下：\n\n![Servlet生命周期](Servlet与JSP/ServletLifeCycle.jpg)\n\n\n* 第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。\n* Servlet 容器在调用 service() 方法之前加载 Servlet。\n* 然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。\n\n## 2. 状态代码\nWeb服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。\n\n### 设置状态代码：setStatus\n> 在向客户程序发送任何文档内容之前设置状态代码\n\n\nsetStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。\n\nHttp1.1中可用的特定的状态代码，如下\n\n|代码区间|描述|\n|---|---|\n|100-199|都是信息性的，标示客户应该采取的其他动作|\n|200-299|标示请求成功|\n|300-399|用于已移走的文件，常常包括Location报头，指出新的地址|\n|400-499|表明由客户引发的错误|\n|500-599|表示由服务器引发的错误|\n\n## Http相应报头\n\n指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。\n\n```java\n setHeader（String headerName,String headerValue） \n```\nHttp允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。\n\n## 3. 过滤器\nServlet过滤器可以动态的拦截请求和响应，可以实现以下目的：\n\n* 在客户端请求访问后端资源之前，拦截请求\n* 在服务端的响应发送客户端之前，处理响应\n\n### 3.1 过滤器接口\n过滤器是实现`javax.servlet.Filter`接口的类。接口包含以下三个方法：\n![Filter interface](Servlet与JSP/filter.png)\n\n过滤器示例：\n```java\n//导入必需的 java 库\nimport javax.servlet.*;\nimport java.util.*;\n//实现 Filter 类\npublic class LogFilter implements Filter  {\n\tpublic void  init(FilterConfig config) throws ServletException {\n\t\t// 获取初始化参数\n\t\tString site = config.getInitParameter(\"Site\"); \n\t\t// 输出初始化参数\n\t\tSystem.out.println(\"网站名称: \" + site); \n\t}\n\tpublic void  doFilter(ServletRequest request, ServletResponse response, FilterChain chain){\n\t\t// 输出站点名称\n\t\tSystem.out.println(\"站点网址：http://www.runoob.com\");\n\t\t// 把请求传回过滤链\n\t\tchain.doFilter(request,response);\n\t}\n\tpublic void destroy( ){\n\t\t/* 在 Filter 实例被 Web 容器从服务移除之前调用 */\n\t}\n}\n```\n\n### 3.2 过滤器实现\n```xml\n<filter>\n\t<filter-name>LoginFilter</filter-name>\n\t<filter-class>com.runoob.test.LogFilter</filter-class>\n\t<init-param>\n\t\t<param-name>Site</param-name>\n\t\t<param-value>菜鸟教程</param-value>\n\t</init-param>\n</filter>\n```","slug":"Servlet与JSP","published":1,"updated":"2017-04-14T01:08:03.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1h9ap1p0005z0lut9w4xnbz","content":"<p>在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。</p>\n<h2 id=\"1-Servlet的生命周期\"><a href=\"#1-Servlet的生命周期\" class=\"headerlink\" title=\"1. Servlet的生命周期\"></a>1. Servlet的生命周期</h2><p>服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。<br>首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。</p>\n<p>Servlet架构图如下：</p>\n<p><img src=\"/blogRecord/2017/04/13/Servlet与JSP/ServletLifeCycle.jpg\" alt=\"Servlet生命周期\"></p>\n<ul>\n<li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li>\n<li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li>\n<li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li>\n</ul>\n<h2 id=\"2-状态代码\"><a href=\"#2-状态代码\" class=\"headerlink\" title=\"2. 状态代码\"></a>2. 状态代码</h2><p>Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。</p>\n<h3 id=\"设置状态代码：setStatus\"><a href=\"#设置状态代码：setStatus\" class=\"headerlink\" title=\"设置状态代码：setStatus\"></a>设置状态代码：setStatus</h3><blockquote>\n<p>在向客户程序发送任何文档内容之前设置状态代码</p>\n</blockquote>\n<p>setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。</p>\n<p>Http1.1中可用的特定的状态代码，如下</p>\n<table>\n<thead>\n<tr>\n<th>代码区间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100-199</td>\n<td>都是信息性的，标示客户应该采取的其他动作</td>\n</tr>\n<tr>\n<td>200-299</td>\n<td>标示请求成功</td>\n</tr>\n<tr>\n<td>300-399</td>\n<td>用于已移走的文件，常常包括Location报头，指出新的地址</td>\n</tr>\n<tr>\n<td>400-499</td>\n<td>表明由客户引发的错误</td>\n</tr>\n<tr>\n<td>500-599</td>\n<td>表示由服务器引发的错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Http相应报头\"><a href=\"#Http相应报头\" class=\"headerlink\" title=\"Http相应报头\"></a>Http相应报头</h2><p>指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setHeader（String headerName,String headerValue）</div></pre></td></tr></table></figure>\n<p>Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。</p>\n<h2 id=\"3-过滤器\"><a href=\"#3-过滤器\" class=\"headerlink\" title=\"3. 过滤器\"></a>3. 过滤器</h2><p>Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的：</p>\n<ul>\n<li>在客户端请求访问后端资源之前，拦截请求</li>\n<li>在服务端的响应发送客户端之前，处理响应</li>\n</ul>\n<h3 id=\"3-1-过滤器接口\"><a href=\"#3-1-过滤器接口\" class=\"headerlink\" title=\"3.1 过滤器接口\"></a>3.1 过滤器接口</h3><p>过滤器是实现<code>javax.servlet.Filter</code>接口的类。接口包含以下三个方法：<br><img src=\"/blogRecord/2017/04/13/Servlet与JSP/filter.png\" alt=\"Filter interface\"></p>\n<p>过滤器示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入必需的 java 库</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"comment\">//实现 Filter 类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span>  </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">init</span><span class=\"params\">(FilterConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 获取初始化参数</span></div><div class=\"line\">\t\tString site = config.getInitParameter(<span class=\"string\">\"Site\"</span>); </div><div class=\"line\">\t\t<span class=\"comment\">// 输出初始化参数</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"网站名称: \"</span> + site); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 输出站点名称</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"站点网址：http://www.runoob.com\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 把请求传回过滤链</span></div><div class=\"line\">\t\tchain.doFilter(request,response);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-过滤器实现\"><a href=\"#3-2-过滤器实现\" class=\"headerlink\" title=\"3.2 过滤器实现\"></a>3.2 过滤器实现</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>LoginFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>Site<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。</p>\n<h2 id=\"1-Servlet的生命周期\"><a href=\"#1-Servlet的生命周期\" class=\"headerlink\" title=\"1. Servlet的生命周期\"></a>1. Servlet的生命周期</h2><p>服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。<br>首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。</p>\n<p>Servlet架构图如下：</p>\n<p><img src=\"/blogRecord/2017/04/13/Servlet与JSP/ServletLifeCycle.jpg\" alt=\"Servlet生命周期\"></p>\n<ul>\n<li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li>\n<li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li>\n<li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li>\n</ul>\n<h2 id=\"2-状态代码\"><a href=\"#2-状态代码\" class=\"headerlink\" title=\"2. 状态代码\"></a>2. 状态代码</h2><p>Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。</p>\n<h3 id=\"设置状态代码：setStatus\"><a href=\"#设置状态代码：setStatus\" class=\"headerlink\" title=\"设置状态代码：setStatus\"></a>设置状态代码：setStatus</h3><blockquote>\n<p>在向客户程序发送任何文档内容之前设置状态代码</p>\n</blockquote>\n<p>setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。</p>\n<p>Http1.1中可用的特定的状态代码，如下</p>\n<table>\n<thead>\n<tr>\n<th>代码区间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100-199</td>\n<td>都是信息性的，标示客户应该采取的其他动作</td>\n</tr>\n<tr>\n<td>200-299</td>\n<td>标示请求成功</td>\n</tr>\n<tr>\n<td>300-399</td>\n<td>用于已移走的文件，常常包括Location报头，指出新的地址</td>\n</tr>\n<tr>\n<td>400-499</td>\n<td>表明由客户引发的错误</td>\n</tr>\n<tr>\n<td>500-599</td>\n<td>表示由服务器引发的错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Http相应报头\"><a href=\"#Http相应报头\" class=\"headerlink\" title=\"Http相应报头\"></a>Http相应报头</h2><p>指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setHeader（String headerName,String headerValue）</div></pre></td></tr></table></figure>\n<p>Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。</p>\n<h2 id=\"3-过滤器\"><a href=\"#3-过滤器\" class=\"headerlink\" title=\"3. 过滤器\"></a>3. 过滤器</h2><p>Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的：</p>\n<ul>\n<li>在客户端请求访问后端资源之前，拦截请求</li>\n<li>在服务端的响应发送客户端之前，处理响应</li>\n</ul>\n<h3 id=\"3-1-过滤器接口\"><a href=\"#3-1-过滤器接口\" class=\"headerlink\" title=\"3.1 过滤器接口\"></a>3.1 过滤器接口</h3><p>过滤器是实现<code>javax.servlet.Filter</code>接口的类。接口包含以下三个方法：<br><img src=\"/blogRecord/2017/04/13/Servlet与JSP/filter.png\" alt=\"Filter interface\"></p>\n<p>过滤器示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入必需的 java 库</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"comment\">//实现 Filter 类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span>  </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">init</span><span class=\"params\">(FilterConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 获取初始化参数</span></div><div class=\"line\">\t\tString site = config.getInitParameter(<span class=\"string\">\"Site\"</span>); </div><div class=\"line\">\t\t<span class=\"comment\">// 输出初始化参数</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"网站名称: \"</span> + site); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 输出站点名称</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"站点网址：http://www.runoob.com\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 把请求传回过滤链</span></div><div class=\"line\">\t\tchain.doFilter(request,response);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-过滤器实现\"><a href=\"#3-2-过滤器实现\" class=\"headerlink\" title=\"3.2 过滤器实现\"></a>3.2 过滤器实现</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>LoginFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>Site<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"我对代码的理解","date":"2017-04-13T01:07:51.000Z","_content":"\n\n转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。\n\n## 1、 美观\n\n代码整体外观应该是赏心悦目的。\n\n打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。\n\n\n## 2、 易读\n\n阅读代码，不看注释就能理解。\n\n代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：\n\n```objectivec\n\n//根据姓名和性别创建一个人\n- (void)createPerson:(NSString *) name withSex:(NSString *)sex;\n\n```\n\n读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。\n\n## 3、 简洁\n\n代码体验的是一个人的解决方案，应该最直接，效率最高！\n\n代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似`if(true) return true; else return false`的代码，像这种情况就很无语了。\n\n## 4、 健壮\n\n代码是能接受考验的！\n\n安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。\n\n在编写函数块的时候：\n\n 要对入参进行判断；\n2. 在调用其他函数的时候，要明确该函数可能返回的数据；\n3. 要对可能出现的异常进行处理，可以catch，可以抛出；\n3. 明确返回值能否传回null。\n……\n\n写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。\n\n## 5、 设计\n\n在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：\n\n1. 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。\n2. 根据当前的数据模型，采用何时的数据结构。\n2. 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏\n3. 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用\n4. 研究某一块的逻辑处理，是否有适用的成熟算法\n\n“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，\n\n## 6、 总结\n\n好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。\n\n\n","source":"_posts/我对代码的理解.md","raw":"---\ntitle: 我对代码的理解\ndate: 2017-04-13 09:07:51\ncategory: 杂谈\ntags: 代码\n---\n\n\n转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。\n\n## 1、 美观\n\n代码整体外观应该是赏心悦目的。\n\n打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。\n\n\n## 2、 易读\n\n阅读代码，不看注释就能理解。\n\n代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：\n\n```objectivec\n\n//根据姓名和性别创建一个人\n- (void)createPerson:(NSString *) name withSex:(NSString *)sex;\n\n```\n\n读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。\n\n## 3、 简洁\n\n代码体验的是一个人的解决方案，应该最直接，效率最高！\n\n代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似`if(true) return true; else return false`的代码，像这种情况就很无语了。\n\n## 4、 健壮\n\n代码是能接受考验的！\n\n安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。\n\n在编写函数块的时候：\n\n 要对入参进行判断；\n2. 在调用其他函数的时候，要明确该函数可能返回的数据；\n3. 要对可能出现的异常进行处理，可以catch，可以抛出；\n3. 明确返回值能否传回null。\n……\n\n写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。\n\n## 5、 设计\n\n在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：\n\n1. 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。\n2. 根据当前的数据模型，采用何时的数据结构。\n2. 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏\n3. 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用\n4. 研究某一块的逻辑处理，是否有适用的成熟算法\n\n“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，\n\n## 6、 总结\n\n好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。\n\n\n","slug":"我对代码的理解","published":1,"updated":"2017-04-13T11:38:41.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1h9ap1p0006z0luop453r02","content":"<p>转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。</p>\n<h2 id=\"1、-美观\"><a href=\"#1、-美观\" class=\"headerlink\" title=\"1、 美观\"></a>1、 美观</h2><p>代码整体外观应该是赏心悦目的。</p>\n<p>打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。</p>\n<h2 id=\"2、-易读\"><a href=\"#2、-易读\" class=\"headerlink\" title=\"2、 易读\"></a>2、 易读</h2><p>阅读代码，不看注释就能理解。</p>\n<p>代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据姓名和性别创建一个人</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)createPerson:(<span class=\"built_in\">NSString</span> *) name withSex:(<span class=\"built_in\">NSString</span> *)sex;</div></pre></td></tr></table></figure>\n<p>读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。</p>\n<h2 id=\"3、-简洁\"><a href=\"#3、-简洁\" class=\"headerlink\" title=\"3、 简洁\"></a>3、 简洁</h2><p>代码体验的是一个人的解决方案，应该最直接，效率最高！</p>\n<p>代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似<code>if(true) return true; else return false</code>的代码，像这种情况就很无语了。</p>\n<h2 id=\"4、-健壮\"><a href=\"#4、-健壮\" class=\"headerlink\" title=\"4、 健壮\"></a>4、 健壮</h2><p>代码是能接受考验的！</p>\n<p>安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。</p>\n<p>在编写函数块的时候：</p>\n<p> 要对入参进行判断；</p>\n<ol>\n<li>在调用其他函数的时候，要明确该函数可能返回的数据；</li>\n<li>要对可能出现的异常进行处理，可以catch，可以抛出；</li>\n<li>明确返回值能否传回null。<br>……</li>\n</ol>\n<p>写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。</p>\n<h2 id=\"5、-设计\"><a href=\"#5、-设计\" class=\"headerlink\" title=\"5、 设计\"></a>5、 设计</h2><p>在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：</p>\n<ol>\n<li>画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。</li>\n<li>根据当前的数据模型，采用何时的数据结构。</li>\n<li>简单的画一下流程图，可以让同事帮忙看一下是否有遗漏</li>\n<li>判断一下当前的需求符合某种模型，是否有何时设计模式可以采用</li>\n<li>研究某一块的逻辑处理，是否有适用的成熟算法</li>\n</ol>\n<p>“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，</p>\n<h2 id=\"6、-总结\"><a href=\"#6、-总结\" class=\"headerlink\" title=\"6、 总结\"></a>6、 总结</h2><p>好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。</p>\n<h2 id=\"1、-美观\"><a href=\"#1、-美观\" class=\"headerlink\" title=\"1、 美观\"></a>1、 美观</h2><p>代码整体外观应该是赏心悦目的。</p>\n<p>打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。</p>\n<h2 id=\"2、-易读\"><a href=\"#2、-易读\" class=\"headerlink\" title=\"2、 易读\"></a>2、 易读</h2><p>阅读代码，不看注释就能理解。</p>\n<p>代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据姓名和性别创建一个人</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)createPerson:(<span class=\"built_in\">NSString</span> *) name withSex:(<span class=\"built_in\">NSString</span> *)sex;</div></pre></td></tr></table></figure>\n<p>读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。</p>\n<h2 id=\"3、-简洁\"><a href=\"#3、-简洁\" class=\"headerlink\" title=\"3、 简洁\"></a>3、 简洁</h2><p>代码体验的是一个人的解决方案，应该最直接，效率最高！</p>\n<p>代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似<code>if(true) return true; else return false</code>的代码，像这种情况就很无语了。</p>\n<h2 id=\"4、-健壮\"><a href=\"#4、-健壮\" class=\"headerlink\" title=\"4、 健壮\"></a>4、 健壮</h2><p>代码是能接受考验的！</p>\n<p>安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。</p>\n<p>在编写函数块的时候：</p>\n<p> 要对入参进行判断；</p>\n<ol>\n<li>在调用其他函数的时候，要明确该函数可能返回的数据；</li>\n<li>要对可能出现的异常进行处理，可以catch，可以抛出；</li>\n<li>明确返回值能否传回null。<br>……</li>\n</ol>\n<p>写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。</p>\n<h2 id=\"5、-设计\"><a href=\"#5、-设计\" class=\"headerlink\" title=\"5、 设计\"></a>5、 设计</h2><p>在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：</p>\n<ol>\n<li>画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。</li>\n<li>根据当前的数据模型，采用何时的数据结构。</li>\n<li>简单的画一下流程图，可以让同事帮忙看一下是否有遗漏</li>\n<li>判断一下当前的需求符合某种模型，是否有何时设计模式可以采用</li>\n<li>研究某一块的逻辑处理，是否有适用的成熟算法</li>\n</ol>\n<p>“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，</p>\n<h2 id=\"6、-总结\"><a href=\"#6、-总结\" class=\"headerlink\" title=\"6、 总结\"></a>6、 总结</h2><p>好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。</p>\n"},{"title":"写在前面的话","date":"2017-04-12T06:19:11.000Z","_content":"\n在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。\n\n参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！\n\ncsdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。\n\n第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。\n\n ","source":"_posts/写在前面的话.md","raw":"---\ntitle: 写在前面的话\ndate: 2017-04-12 14:19:11\ncategory: 杂谈\ntags: 生活\n---\n\n在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。\n\n参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！\n\ncsdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。\n\n第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。\n\n ","slug":"写在前面的话","published":1,"updated":"2017-04-13T11:09:21.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1h9ap1p0007z0luxcuhg7k3","content":"<p>在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。</p>\n<p>参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！</p>\n<p>csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。</p>\n<p>第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。</p>\n<p>参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！</p>\n<p>csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。</p>\n<p>第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Servlet与JSP/ServletLifeCycle.jpg","slug":"ServletLifeCycle.jpg","post":"cj1h9ap1p0005z0lut9w4xnbz","modified":0,"renderable":0},{"_id":"source/_posts/Servlet与JSP/filter.png","slug":"filter.png","post":"cj1h9ap1p0005z0lut9w4xnbz","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj1h9ap190000z0luu9lxip6e","category_id":"cj1h9ap1p0003z0luu55oexdj","_id":"cj1h9ap1p000bz0lutzsihwts"},{"post_id":"cj1h9ap1p0002z0lu7u45yd8b","category_id":"cj1h9ap1p0008z0luw8ejf3g9","_id":"cj1h9ap24000fz0lu6jkw5q9q"},{"post_id":"cj1h9ap1p0005z0lut9w4xnbz","category_id":"cj1h9ap1p0003z0luu55oexdj","_id":"cj1h9ap24000jz0lukr5ukkk4"},{"post_id":"cj1h9ap1p0006z0luop453r02","category_id":"cj1h9ap24000gz0luksltca7f","_id":"cj1h9ap24000nz0lux4rcbunl"},{"post_id":"cj1h9ap1p0007z0luxcuhg7k3","category_id":"cj1h9ap24000gz0luksltca7f","_id":"cj1h9ap24000pz0lupu4jynmz"}],"PostTag":[{"post_id":"cj1h9ap190000z0luu9lxip6e","tag_id":"cj1h9ap1p0004z0luhv3yi09c","_id":"cj1h9ap1p000az0luhklkk8bq"},{"post_id":"cj1h9ap1p0002z0lu7u45yd8b","tag_id":"cj1h9ap1p0009z0lur9brj19l","_id":"cj1h9ap24000ez0luqevazrnb"},{"post_id":"cj1h9ap1p0005z0lut9w4xnbz","tag_id":"cj1h9ap1p0004z0luhv3yi09c","_id":"cj1h9ap24000iz0lufw1bgnj5"},{"post_id":"cj1h9ap1p0006z0luop453r02","tag_id":"cj1h9ap24000hz0luutm9vg1r","_id":"cj1h9ap24000mz0lupoidunsk"},{"post_id":"cj1h9ap1p0007z0luxcuhg7k3","tag_id":"cj1h9ap24000lz0lu4m4got9v","_id":"cj1h9ap24000oz0luus8n33dz"}],"Tag":[{"name":"JavaWeb","_id":"cj1h9ap1p0004z0luhv3yi09c"},{"name":"协议","_id":"cj1h9ap1p0009z0lur9brj19l"},{"name":"代码","_id":"cj1h9ap24000hz0luutm9vg1r"},{"name":"生活","_id":"cj1h9ap24000lz0lu4m4got9v"}]}}
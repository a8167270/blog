{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"source/images/kaola.jpg","path":"images/kaola.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1495443820597},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1495443820597},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1495443820598},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1495443820598},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1495443820599},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1495443820599},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1495443820599},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1495443820599},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1495443820599},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1495443820599},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1495443820600},{"_id":"themes/next/_config.yml","hash":"6e04a74d7ad162723e8074448a3c68583bc1156b","modified":1495450388035},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1495443820600},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1495443820600},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1495443820600},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1495443820621},{"_id":"source/_posts/HttpClient.md","hash":"3cae8d23d24d6d2ecbef3e51641fbf09a5d458fd","modified":1495445332092},{"_id":"source/_posts/Http协议.md","hash":"ef1ae57a5027785a2e194da9b9601caa8873b2e0","modified":1495449867876},{"_id":"source/_posts/Servlet与JSP.md","hash":"88db75e0c47715f763973a0ceee3e0b95dbafc7a","modified":1495445309985},{"_id":"source/_posts/struts2源码阅读.md","hash":"49d533a1a264d515fd7c056541d0b7ef7aec11c9","modified":1495445315663},{"_id":"source/_posts/写在前面的话.md","hash":"0705cfec47ab88457d932f93c92b73cb0b643216","modified":1495445231809},{"_id":"source/_posts/我对代码的理解.md","hash":"a8b5055053f396ad2ca0f689d156c1ce8c91fdb5","modified":1495445226935},{"_id":"source/about/index.md","hash":"f067f2c2e223b83eb6b861e9cc6eadfe54565460","modified":1492422438893},{"_id":"source/tags/index.md","hash":"65f36632a7db6f3991a7af654c248745107aefd0","modified":1492422438893},{"_id":"source/categories/index.md","hash":"8e0e063bc71e895f178204ef599cd408dee070e5","modified":1492422438893},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1495443820589},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1495443820591},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1495443760854},{"_id":"themes/next/.git/index","hash":"5f7bd3594b83fc4cf0c76274993359aeba3de7d8","modified":1495443820706},{"_id":"themes/next/.git/packed-refs","hash":"5b997b1e07005896f9418ebc524143b6a66718fb","modified":1495443820587},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1495443820598},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1495443820598},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1495443820601},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1495443820601},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1495443820601},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1495443820601},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1495443820601},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1495443820602},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1495443820602},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1495443820602},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1495443820602},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1495443820603},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1495443820603},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1495443820603},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1495443820603},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1495443820604},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1495443820619},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1495443820619},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1495443820619},{"_id":"themes/next/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1495443820619},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1495443820620},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1495443820620},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1495443820620},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1495443820621},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1495443820622},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1495446382421},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1495443820705},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1495443820705},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1495443820705},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820661},{"_id":"source/_posts/Servlet与JSP/ServletLifeCycle.jpg","hash":"69aab25225cd25f92531cc51aa4a1ae1143ab06d","modified":1492422438892},{"_id":"source/_posts/Servlet与JSP/filter.png","hash":"b627de0a6d139053050ad1e3796e62481da4da60","modified":1492422438892},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1495443760863},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1495443760863},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1495443760864},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1495443760864},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1495443760865},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1495443760864},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1495443760865},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1495443760865},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1495443760866},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1495443760866},{"_id":"themes/next/.git/logs/HEAD","hash":"a22617fdc27ac6dafd7207d303c4f6ab75badfb5","modified":1495443820590},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495443820604},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495443820604},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1495443820604},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1495443820604},{"_id":"themes/next/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1495443820605},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1495443820605},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1495443820605},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1495443820605},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1495443820606},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1495443820606},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1495443820607},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1495443820607},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1495443820607},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1495443820608},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1495443820608},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1495443820610},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1495443820610},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1495443820612},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1495443820616},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1495443820616},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1495443820616},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1495443820617},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1495443820616},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1495443820636},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1495443820637},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1495443820637},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1495443820638},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1495443820638},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1495443820639},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1495443820661},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495443820661},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495443820661},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495443820662},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495443820662},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495443820662},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495443820662},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495443820662},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495443820663},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495443820663},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495443820663},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495443820663},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495443820663},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495443820663},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495443820664},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820611},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820611},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820654},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820654},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820655},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820660},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495443820660},{"_id":"themes/next/.git/refs/heads/master","hash":"f6fbd6961a37e7fcf4a1afacee916a1080c7cadc","modified":1495443820589},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1495443820607},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1495443820607},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1495443820608},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1495443820608},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1495443820609},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1495443820609},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1495443820609},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1495443820609},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1495443820610},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1495443820611},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1495443820611},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1495443820612},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1495443820612},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1495443820613},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1495443820613},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1495443820614},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1495443820614},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1495443820614},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1495443820613},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1495443820614},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1495443820614},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1495443820614},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1495443820615},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1495443820616},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1495443820618},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1495443820617},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1495443820618},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1495443820618},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1495443820654},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1495443820654},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1495443820655},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1495443820660},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1495443820660},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1495443820660},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1495443820664},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1495443820664},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1495443820664},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1495443820664},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1495443820665},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1495443820665},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1495443820665},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1495443820666},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1495443820666},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1495443820666},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1495443820666},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495443820672},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1495443820676},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1495443820676},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1495443820676},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1495443820675},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1495443820681},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1495443820681},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495443820681},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1495443820681},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1495443820682},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1495443820682},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1495443820682},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495443820683},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1495443820683},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1495443820694},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1495443820695},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1495443820696},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1495443820695},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1495443820695},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1495443820696},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1495443820696},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1495443820696},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1495443820697},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1495443820697},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1495443820702},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1495443820702},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1495443820704},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1495443820704},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1495443820704},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1495443820695},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"a22617fdc27ac6dafd7207d303c4f6ab75badfb5","modified":1495443820590},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1495443820588},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1495443820617},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1495443820617},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1495443820640},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1495443820640},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1495443820641},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1495443820641},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1495443820639},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1495443820645},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1495443820649},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1495443820653},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1495443820653},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1495443820654},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1495443820653},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1495443820654},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1495443820655},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1495443820654},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1495443820655},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1495443820655},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495443820656},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1495443820656},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1495443820656},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1495443820656},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1495443820658},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1495443820658},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495443820658},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1495443820658},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1495443820658},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1495443820659},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e8947c76d0839a342fe34db1b9db7da2847afc3b","modified":1495444975507},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1495443820659},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1495443820659},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1495443820660},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1495443820666},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1495443820659},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1495443820671},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495443820676},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1495443820672},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495443820677},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495443820676},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495443820677},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495443820678},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495443820677},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1495443820679},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1495443820680},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1495443820680},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1495443820682},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495443820682},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1495443820683},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495443820683},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1495443820684},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1495443820701},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1495443820701},{"_id":"themes/next/.git/objects/pack/pack-d099dde9854a6782e3776f8553e8234ee3830b1b.idx","hash":"412be94c51611ceb9d45eb78e6c1c9f72a101957","modified":1495443820442},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1495443820670},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1495443820670},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1495443820693},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1495443820694},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1495443820703},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"a22617fdc27ac6dafd7207d303c4f6ab75badfb5","modified":1495443820588},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1495443820641},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1495443820643},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1495443820643},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1495443820643},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1495443820642},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1495443820642},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1495443820642},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"96e41b1bebeb4043482176bdda2087d2e18a5cdd","modified":1495449772567},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1495443820643},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1495443820644},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1495443820644},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1495443820644},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1495443820644},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1495443820645},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1495443820645},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1495443820645},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1495443820646},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1495443820646},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1495443820646},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1495443820644},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1495443820645},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"fd4a714db9a49521d77884f2601cbbeaab4e18f8","modified":1495449555266},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1495443820646},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1495443820646},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1495443820647},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1495443820648},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1495443820647},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1495443820646},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1495443820649},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1495443820648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1495443820649},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1495443820649},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1495443820648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1495443820649},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1495443820649},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1495443820649},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1495443820650},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1495443820650},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1495443820650},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1495443820651},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1495443820650},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1495443820651},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1495443820652},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1495443820652},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1495443820652},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1495443820652},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1495443820651},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1495443820652},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1495443820653},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1495443820652},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1495443820657},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495443820659},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495443820657},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1495443820668},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1495443820651},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1495443820668},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1495443820668},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1495443820669},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495443820678},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1495443820678},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1495443820679},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1495443820679},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1495443820678},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1495443820679},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1495443820685},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1495443820687},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1495443820692},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1495443820675},{"_id":"source/images/kaola.jpg","hash":"9c3dcb1f9185a314ea25d51aed3b5881b32f420c","modified":1247549551658},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1495443820701},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1495443820690},{"_id":"themes/next/.git/objects/pack/pack-d099dde9854a6782e3776f8553e8234ee3830b1b.pack","hash":"ab71f35194674b9f143e3e6a99d34db399d6442d","modified":1495443820508}],"Category":[{"name":"Java","_id":"cj300kwb90004qwluvbe8i5gj"},{"name":"网络","_id":"cj300kwbu000jqwluizx55ai8"},{"name":"杂谈","_id":"cj300kwbv000nqwluw99ny937"}],"Data":[],"Page":[{"title":"tags","date":"2017-04-17T07:52:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-17 15:52:59\ntype: \"tags\"\n---\n","updated":"2017-04-17T09:47:18.893Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj300kwb40001qwluovz5zuhe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-04-17T07:56:41.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-17 15:56:41\ntype: \"categories\"\n---\n","updated":"2017-04-17T09:47:18.893Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj300kwb80003qwlul7es6dsd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-04-13T11:13:32.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-13 19:13:32\n---\n","updated":"2017-04-17T09:47:18.893Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj300kwbk0007qwluqfez0izr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HttpClient","date":"2017-04-14T02:56:56.000Z","toc":true,"_content":"## 1. 简介\nHttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。\n\n## 2. 使用方法\n使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 \n1. 创建HttpClient对象。\n2. 创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。\n3. 如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。\n4. 调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。\n5. 调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。\n6. 释放连接。无论执行方法是否成功，都必须释放连接\n\n<!-- more -->\n\n代码整体示例：\n```java\nimport org.apache.commons.httpclient.*;\nimport org.apache.commons.httpclient.methods.*;\nimport org.apache.commons.httpclient.params.HttpMethodParams;\nimport java.io.*;\n\npublic class HttpClientTutorial {\n  \n  private static String url = \"http://www.apache.org/\";\n  \n  public static void main(String[] args) {\n      \n    // 创建HttpClient对象\n    HttpClient client = new HttpClient();\n    \n    // 创建请求方法的实例\n    GetMethod method = new GetMethod(url);\n    \n    // 请求参数\n    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, \n    \t\tnew DefaultHttpMethodRetryHandler(3, false));\n            \n    try {\n      // Execute the method.\n      int statusCode = client.executeMethod(method);\n      \n      if (statusCode != HttpStatus.SC_OK) {\n        System.err.println(\"Method failed: \" + method.getStatusLine());\n      }\n      \n      // Read the response body.\n      byte[] responseBody = method.getResponseBody();\n      \n      // Deal with the response.\n      // Use caution: ensure correct character encoding and is not binary data\n      System.out.println(new String(responseBody));\n    } catch (HttpException e) {\n        \n      System.err.println(\"Fatal protocol violation: \" + e.getMessage());\n      e.printStackTrace();\n    } catch (IOException e) {\n        \n      System.err.println(\"Fatal transport error: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n        \n      // Release the connection.\n      method.releaseConnection();\n    }  \n  }\n}\n```","source":"_posts/HttpClient.md","raw":"---\ntitle: HttpClient\ndate: 2017-04-14 10:56:56\ncategory: Java\ntags: JavaWeb\ntoc: true\n---\n## 1. 简介\nHttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。\n\n## 2. 使用方法\n使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 \n1. 创建HttpClient对象。\n2. 创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。\n3. 如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。\n4. 调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。\n5. 调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。\n6. 释放连接。无论执行方法是否成功，都必须释放连接\n\n<!-- more -->\n\n代码整体示例：\n```java\nimport org.apache.commons.httpclient.*;\nimport org.apache.commons.httpclient.methods.*;\nimport org.apache.commons.httpclient.params.HttpMethodParams;\nimport java.io.*;\n\npublic class HttpClientTutorial {\n  \n  private static String url = \"http://www.apache.org/\";\n  \n  public static void main(String[] args) {\n      \n    // 创建HttpClient对象\n    HttpClient client = new HttpClient();\n    \n    // 创建请求方法的实例\n    GetMethod method = new GetMethod(url);\n    \n    // 请求参数\n    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, \n    \t\tnew DefaultHttpMethodRetryHandler(3, false));\n            \n    try {\n      // Execute the method.\n      int statusCode = client.executeMethod(method);\n      \n      if (statusCode != HttpStatus.SC_OK) {\n        System.err.println(\"Method failed: \" + method.getStatusLine());\n      }\n      \n      // Read the response body.\n      byte[] responseBody = method.getResponseBody();\n      \n      // Deal with the response.\n      // Use caution: ensure correct character encoding and is not binary data\n      System.out.println(new String(responseBody));\n    } catch (HttpException e) {\n        \n      System.err.println(\"Fatal protocol violation: \" + e.getMessage());\n      e.printStackTrace();\n    } catch (IOException e) {\n        \n      System.err.println(\"Fatal transport error: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n        \n      // Release the connection.\n      method.releaseConnection();\n    }  \n  }\n}\n```","slug":"HttpClient","published":1,"updated":"2017-05-22T09:28:52.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj300kwax0000qwlu8o6z4s1t","content":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。</p>\n<h2 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h2><p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 </p>\n<ol>\n<li>创建HttpClient对象。</li>\n<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</li>\n<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</li>\n<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</li>\n<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</li>\n<li>释放连接。无论执行方法是否成功，都必须释放连接</li>\n</ol>\n<a id=\"more\"></a>\n<p>代码整体示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.methods.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.params.HttpMethodParams;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientTutorial</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"http://www.apache.org/\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">// 创建HttpClient对象</span></div><div class=\"line\">    HttpClient client = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 创建请求方法的实例</span></div><div class=\"line\">    GetMethod method = <span class=\"keyword\">new</span> GetMethod(url);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 请求参数</span></div><div class=\"line\">    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, </div><div class=\"line\">    \t\t<span class=\"keyword\">new</span> DefaultHttpMethodRetryHandler(<span class=\"number\">3</span>, <span class=\"keyword\">false</span>));</div><div class=\"line\">            </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Execute the method.</span></div><div class=\"line\">      <span class=\"keyword\">int</span> statusCode = client.executeMethod(method);</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">if</span> (statusCode != HttpStatus.SC_OK) &#123;</div><div class=\"line\">        System.err.println(<span class=\"string\">\"Method failed: \"</span> + method.getStatusLine());</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">// Read the response body.</span></div><div class=\"line\">      <span class=\"keyword\">byte</span>[] responseBody = method.getResponseBody();</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">// Deal with the response.</span></div><div class=\"line\">      <span class=\"comment\">// Use caution: ensure correct character encoding and is not binary data</span></div><div class=\"line\">      System.out.println(<span class=\"keyword\">new</span> String(responseBody));</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpException e) &#123;</div><div class=\"line\">        </div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal protocol violation: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">        </div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal transport error: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">      <span class=\"comment\">// Release the connection.</span></div><div class=\"line\">      method.releaseConnection();</div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。</p>\n<h2 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h2><p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。 </p>\n<ol>\n<li>创建HttpClient对象。</li>\n<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</li>\n<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</li>\n<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</li>\n<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</li>\n<li>释放连接。无论执行方法是否成功，都必须释放连接</li>\n</ol>","more":"<p>代码整体示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.methods.*;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.httpclient.params.HttpMethodParams;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientTutorial</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"http://www.apache.org/\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">// 创建HttpClient对象</span></div><div class=\"line\">    HttpClient client = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 创建请求方法的实例</span></div><div class=\"line\">    GetMethod method = <span class=\"keyword\">new</span> GetMethod(url);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 请求参数</span></div><div class=\"line\">    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, </div><div class=\"line\">    \t\t<span class=\"keyword\">new</span> DefaultHttpMethodRetryHandler(<span class=\"number\">3</span>, <span class=\"keyword\">false</span>));</div><div class=\"line\">            </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Execute the method.</span></div><div class=\"line\">      <span class=\"keyword\">int</span> statusCode = client.executeMethod(method);</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">if</span> (statusCode != HttpStatus.SC_OK) &#123;</div><div class=\"line\">        System.err.println(<span class=\"string\">\"Method failed: \"</span> + method.getStatusLine());</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">// Read the response body.</span></div><div class=\"line\">      <span class=\"keyword\">byte</span>[] responseBody = method.getResponseBody();</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">// Deal with the response.</span></div><div class=\"line\">      <span class=\"comment\">// Use caution: ensure correct character encoding and is not binary data</span></div><div class=\"line\">      System.out.println(<span class=\"keyword\">new</span> String(responseBody));</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpException e) &#123;</div><div class=\"line\">        </div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal protocol violation: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">        </div><div class=\"line\">      System.err.println(<span class=\"string\">\"Fatal transport error: \"</span> + e.getMessage());</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">      <span class=\"comment\">// Release the connection.</span></div><div class=\"line\">      method.releaseConnection();</div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Servlet","date":"2017-04-13T07:33:26.000Z","toc":true,"_content":"\n在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。\n\n# Servlet简介\n\n## Servlet的生命周期\n服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。\n\nServlet 生命周期：Servlet 加载--->实例化--->服务--->销毁。\n\n\n1. init（）：在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。\n\n2. service（）：它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。\n\n3. destroy（）： 仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。\n\nServlet架构图如下：\n\n![Servlet生命周期](Servlet与JSP/ServletLifeCycle.jpg)\n\n<!-- more -->\n\n## Servlet的工作流程\n\n1. Web Client 向Servlet容器（Tomcat）发出Http请求\n2. Servlet容器接收Web Client的请求\n3. Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。\n4. Servlet容器创建一个HttpResponse对象\n5. Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet 对象。\n6. HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。\n7. HttpServlet调用HttpResponse对象的有关方法，生成响应数据。\n8. Servlet容器把HttpServlet的响应结果传给Web Client。\n\n## Servlet的创建\n\n1. Servlet容器启动时：读取web.xml配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。\n\n2. 在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet对象的service方法。\n\n3. Servlet Servlet容器在启动时自动创建Servlet，这是由在web.xml文件中为Servlet设置的<load-on-startup>属性决定的。从中我们也能看到同一个类型的Servlet对象在Servlet容器中以单例的形式存在。\n\n\n# Servlet的配置\n## 映射配置\n### web.xml配置\n```xml\n<servlet>\n\t<servlet-name>HelloWorld</servlet-name>\n\t<servlet-class>jp.co.xiehl.servlet.ch7.HelloWorldServlet</servlet-class>\n</servlet>\n//servlet映射配置\n<servlet-mapping>\n\t<servlet-name>HelloWorld</servlet-name>\n\t<url-pattern>/hello</url-pattern>\n</servlet-mapping>\n\n访问时：localhost:8080/工程名/hello即可。\n\n```\n\n### servlet3.0 注解\n```java\n@WebServlet(name=”Hello”, urlPatterns={“/hello.view”}, loadOnStartup=1)\npublic class HelloServlet extends HttpServlet {}\n```\n上面的例子表示为，name为Hello的servlet，url为hello.view的。\n\n## 过滤器\nServlet过滤器可以动态的拦截请求和响应，可以实现以下目的：\n\n* 在客户端请求访问后端资源之前，拦截请求\n* 在服务端的响应发送客户端之前，处理响应\n\n### 实现过滤器接口\n过滤器是实现`javax.servlet.Filter`接口的类。接口包含以下三个方法：\n![Filter interface](Servlet与JSP/filter.png)\n\n过滤器示例：\n```java\n//导入必需的 java 库\nimport javax.servlet.*;\nimport java.util.*;\n\n//实现 Filter 类\npublic class LogFilter implements Filter  {\n\tpublic void  init(FilterConfig config) throws ServletException {\n\t\t// 获取初始化参数\n\t\tString site = config.getInitParameter(\"Site\"); \n\t\t// 输出初始化参数\n\t\tSystem.out.println(\"网站名称: \" + site); \n\t}\n\t\n\tpublic void  doFilter(ServletRequest request, ServletResponse response, FilterChain chain){\n\t\t// 输出站点名称\n\t\tSystem.out.println(\"站点网址：http://www.runoob.com\");\n\t\t// 把请求传回过滤链\n\t\tchain.doFilter(request,response);\n\t}\n\t\n\tpublic void destroy( ){\n\t\t/* 在 Filter 实例被 Web 容器从服务移除之前调用 */\n\t}\n}\n```\n\n### xml配置过滤器\n```xml\n<filter>指定一个过滤器。\n\t<filter-name>用于为过滤器指定一个名字，该元素的内容不能为空。\n\t<filter-class>元素用于指定过滤器的完整的限定类名。\n\t<init-param>元素用于为过滤器指定初始化参数，它的子元素\n\t\t<param-name>指定参数的名字，\n\t\t<param-value>指定参数的值。在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。\n\t\n<filter-mapping>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径\n\t<filter-name>子元素用于设置filter的注册名称。该值必须是在<filter>元素中声明过的过滤器的名字\n\t<url-pattern>设置 filter 所拦截的请求路径(过滤器关联的URL样式)\n\t<servlet-name>指定过滤器所拦截的Servlet名称。\n\t<dispatcher>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<dispatcher>子元素用来指定 Filter 对资源的多种调用方式进行拦截。\n```\n\n<dispatcher>子元素可以设置的值及其意义\n\n|参数|描述|\n|---|---|\n|REQUEST|当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。|\n|INCLUDE|如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。|\n|FORWARD|如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。|\n|ERROR|如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。|\n\n\n## 2. 状态代码\n\nWeb服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。\n\n### 设置状态代码：setStatus\n> 在向客户程序发送任何文档内容之前设置状态代码\n\n\nsetStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。\n\nHttp1.1中可用的特定的状态代码，如下\n\n|代码区间|描述|\n|---|---|\n|100-199|都是信息性的，标示客户应该采取的其他动作|\n|200-299|标示请求成功|\n|300-399|用于已移走的文件，常常包括Location报头，指出新的地址|\n|400-499|表明由客户引发的错误|\n|500-599|表示由服务器引发的错误|\n\n## Http相应报头\n\n指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。\n\n```java\n setHeader（String headerName,String headerValue） \n```\nHttp允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。","source":"_posts/Servlet与JSP.md","raw":"---\ntitle: Servlet\ndate: 2017-04-13 15:33:26\ncategory: Java\ntags: JavaWeb\ntoc: true\n---\n\n在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。\n\n# Servlet简介\n\n## Servlet的生命周期\n服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。\n\nServlet 生命周期：Servlet 加载--->实例化--->服务--->销毁。\n\n\n1. init（）：在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。\n\n2. service（）：它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。\n\n3. destroy（）： 仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。\n\nServlet架构图如下：\n\n![Servlet生命周期](Servlet与JSP/ServletLifeCycle.jpg)\n\n<!-- more -->\n\n## Servlet的工作流程\n\n1. Web Client 向Servlet容器（Tomcat）发出Http请求\n2. Servlet容器接收Web Client的请求\n3. Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。\n4. Servlet容器创建一个HttpResponse对象\n5. Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet 对象。\n6. HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。\n7. HttpServlet调用HttpResponse对象的有关方法，生成响应数据。\n8. Servlet容器把HttpServlet的响应结果传给Web Client。\n\n## Servlet的创建\n\n1. Servlet容器启动时：读取web.xml配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。\n\n2. 在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet对象的service方法。\n\n3. Servlet Servlet容器在启动时自动创建Servlet，这是由在web.xml文件中为Servlet设置的<load-on-startup>属性决定的。从中我们也能看到同一个类型的Servlet对象在Servlet容器中以单例的形式存在。\n\n\n# Servlet的配置\n## 映射配置\n### web.xml配置\n```xml\n<servlet>\n\t<servlet-name>HelloWorld</servlet-name>\n\t<servlet-class>jp.co.xiehl.servlet.ch7.HelloWorldServlet</servlet-class>\n</servlet>\n//servlet映射配置\n<servlet-mapping>\n\t<servlet-name>HelloWorld</servlet-name>\n\t<url-pattern>/hello</url-pattern>\n</servlet-mapping>\n\n访问时：localhost:8080/工程名/hello即可。\n\n```\n\n### servlet3.0 注解\n```java\n@WebServlet(name=”Hello”, urlPatterns={“/hello.view”}, loadOnStartup=1)\npublic class HelloServlet extends HttpServlet {}\n```\n上面的例子表示为，name为Hello的servlet，url为hello.view的。\n\n## 过滤器\nServlet过滤器可以动态的拦截请求和响应，可以实现以下目的：\n\n* 在客户端请求访问后端资源之前，拦截请求\n* 在服务端的响应发送客户端之前，处理响应\n\n### 实现过滤器接口\n过滤器是实现`javax.servlet.Filter`接口的类。接口包含以下三个方法：\n![Filter interface](Servlet与JSP/filter.png)\n\n过滤器示例：\n```java\n//导入必需的 java 库\nimport javax.servlet.*;\nimport java.util.*;\n\n//实现 Filter 类\npublic class LogFilter implements Filter  {\n\tpublic void  init(FilterConfig config) throws ServletException {\n\t\t// 获取初始化参数\n\t\tString site = config.getInitParameter(\"Site\"); \n\t\t// 输出初始化参数\n\t\tSystem.out.println(\"网站名称: \" + site); \n\t}\n\t\n\tpublic void  doFilter(ServletRequest request, ServletResponse response, FilterChain chain){\n\t\t// 输出站点名称\n\t\tSystem.out.println(\"站点网址：http://www.runoob.com\");\n\t\t// 把请求传回过滤链\n\t\tchain.doFilter(request,response);\n\t}\n\t\n\tpublic void destroy( ){\n\t\t/* 在 Filter 实例被 Web 容器从服务移除之前调用 */\n\t}\n}\n```\n\n### xml配置过滤器\n```xml\n<filter>指定一个过滤器。\n\t<filter-name>用于为过滤器指定一个名字，该元素的内容不能为空。\n\t<filter-class>元素用于指定过滤器的完整的限定类名。\n\t<init-param>元素用于为过滤器指定初始化参数，它的子元素\n\t\t<param-name>指定参数的名字，\n\t\t<param-value>指定参数的值。在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。\n\t\n<filter-mapping>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径\n\t<filter-name>子元素用于设置filter的注册名称。该值必须是在<filter>元素中声明过的过滤器的名字\n\t<url-pattern>设置 filter 所拦截的请求路径(过滤器关联的URL样式)\n\t<servlet-name>指定过滤器所拦截的Servlet名称。\n\t<dispatcher>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<dispatcher>子元素用来指定 Filter 对资源的多种调用方式进行拦截。\n```\n\n<dispatcher>子元素可以设置的值及其意义\n\n|参数|描述|\n|---|---|\n|REQUEST|当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。|\n|INCLUDE|如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。|\n|FORWARD|如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。|\n|ERROR|如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。|\n\n\n## 2. 状态代码\n\nWeb服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。\n\n### 设置状态代码：setStatus\n> 在向客户程序发送任何文档内容之前设置状态代码\n\n\nsetStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。\n\nHttp1.1中可用的特定的状态代码，如下\n\n|代码区间|描述|\n|---|---|\n|100-199|都是信息性的，标示客户应该采取的其他动作|\n|200-299|标示请求成功|\n|300-399|用于已移走的文件，常常包括Location报头，指出新的地址|\n|400-499|表明由客户引发的错误|\n|500-599|表示由服务器引发的错误|\n\n## Http相应报头\n\n指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。\n\n```java\n setHeader（String headerName,String headerValue） \n```\nHttp允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。","slug":"Servlet与JSP","published":1,"updated":"2017-05-22T09:28:29.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj300kwb60002qwlu4c6as3a9","content":"<p>在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。</p>\n<h1 id=\"Servlet简介\"><a href=\"#Servlet简介\" class=\"headerlink\" title=\"Servlet简介\"></a>Servlet简介</h1><h2 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"Servlet的生命周期\"></a>Servlet的生命周期</h2><p>服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。</p>\n<p>Servlet 生命周期：Servlet 加载—&gt;实例化—&gt;服务—&gt;销毁。</p>\n<ol>\n<li><p>init（）：在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。</p>\n</li>\n<li><p>service（）：它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。</p>\n</li>\n<li><p>destroy（）： 仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。</p>\n</li>\n</ol>\n<p>Servlet架构图如下：</p>\n<p><img src=\"/blogRecord/2017/04/13/Servlet与JSP/ServletLifeCycle.jpg\" alt=\"Servlet生命周期\"></p>\n<a id=\"more\"></a>\n<h2 id=\"Servlet的工作流程\"><a href=\"#Servlet的工作流程\" class=\"headerlink\" title=\"Servlet的工作流程\"></a>Servlet的工作流程</h2><ol>\n<li>Web Client 向Servlet容器（Tomcat）发出Http请求</li>\n<li>Servlet容器接收Web Client的请求</li>\n<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。</li>\n<li>Servlet容器创建一个HttpResponse对象</li>\n<li>Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet 对象。</li>\n<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。</li>\n<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据。</li>\n<li>Servlet容器把HttpServlet的响应结果传给Web Client。</li>\n</ol>\n<h2 id=\"Servlet的创建\"><a href=\"#Servlet的创建\" class=\"headerlink\" title=\"Servlet的创建\"></a>Servlet的创建</h2><ol>\n<li><p>Servlet容器启动时：读取web.xml配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。</p>\n</li>\n<li><p>在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet对象的service方法。</p>\n</li>\n<li><p>Servlet Servlet容器在启动时自动创建Servlet，这是由在web.xml文件中为Servlet设置的<load-on-startup>属性决定的。从中我们也能看到同一个类型的Servlet对象在Servlet容器中以单例的形式存在。</load-on-startup></p>\n</li>\n</ol>\n<h1 id=\"Servlet的配置\"><a href=\"#Servlet的配置\" class=\"headerlink\" title=\"Servlet的配置\"></a>Servlet的配置</h1><h2 id=\"映射配置\"><a href=\"#映射配置\" class=\"headerlink\" title=\"映射配置\"></a>映射配置</h2><h3 id=\"web-xml配置\"><a href=\"#web-xml配置\" class=\"headerlink\" title=\"web.xml配置\"></a>web.xml配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>jp.co.xiehl.servlet.ch7.HelloWorldServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">//servlet映射配置</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">访问时：localhost:8080/工程名/hello即可。</div></pre></td></tr></table></figure>\n<h3 id=\"servlet3-0-注解\"><a href=\"#servlet3-0-注解\" class=\"headerlink\" title=\"servlet3.0 注解\"></a>servlet3.0 注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@WebServlet</span>(name=”Hello”, urlPatterns=&#123;“/hello.view”&#125;, loadOnStartup=<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子表示为，name为Hello的servlet，url为hello.view的。</p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的：</p>\n<ul>\n<li>在客户端请求访问后端资源之前，拦截请求</li>\n<li>在服务端的响应发送客户端之前，处理响应</li>\n</ul>\n<h3 id=\"实现过滤器接口\"><a href=\"#实现过滤器接口\" class=\"headerlink\" title=\"实现过滤器接口\"></a>实现过滤器接口</h3><p>过滤器是实现<code>javax.servlet.Filter</code>接口的类。接口包含以下三个方法：<br><img src=\"/blogRecord/2017/04/13/Servlet与JSP/filter.png\" alt=\"Filter interface\"></p>\n<p>过滤器示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入必需的 java 库</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现 Filter 类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span>  </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">init</span><span class=\"params\">(FilterConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 获取初始化参数</span></div><div class=\"line\">\t\tString site = config.getInitParameter(<span class=\"string\">\"Site\"</span>); </div><div class=\"line\">\t\t<span class=\"comment\">// 输出初始化参数</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"网站名称: \"</span> + site); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 输出站点名称</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"站点网址：http://www.runoob.com\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 把请求传回过滤链</span></div><div class=\"line\">\t\tchain.doFilter(request,response);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"xml配置过滤器\"><a href=\"#xml配置过滤器\" class=\"headerlink\" title=\"xml配置过滤器\"></a>xml配置过滤器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>指定一个过滤器。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>用于为过滤器指定一个名字，该元素的内容不能为空。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>元素用于指定过滤器的完整的限定类名。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span>元素用于为过滤器指定初始化参数，它的子元素</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>指定参数的名字，</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>指定参数的值。在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>子元素用于设置filter的注册名称。该值必须是在<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>元素中声明过的过滤器的名字</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>设置 filter 所拦截的请求路径(过滤器关联的URL样式)</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>指定过滤器所拦截的Servlet名称。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>子元素用来指定 Filter 对资源的多种调用方式进行拦截。</div></pre></td></tr></table></figure>\n<p><dispatcher>子元素可以设置的值及其意义</dispatcher></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>REQUEST</td>\n<td>当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。</td>\n</tr>\n<tr>\n<td>INCLUDE</td>\n<td>如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</td>\n</tr>\n<tr>\n<td>FORWARD</td>\n<td>如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-状态代码\"><a href=\"#2-状态代码\" class=\"headerlink\" title=\"2. 状态代码\"></a>2. 状态代码</h2><p>Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。</p>\n<h3 id=\"设置状态代码：setStatus\"><a href=\"#设置状态代码：setStatus\" class=\"headerlink\" title=\"设置状态代码：setStatus\"></a>设置状态代码：setStatus</h3><blockquote>\n<p>在向客户程序发送任何文档内容之前设置状态代码</p>\n</blockquote>\n<p>setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。</p>\n<p>Http1.1中可用的特定的状态代码，如下</p>\n<table>\n<thead>\n<tr>\n<th>代码区间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100-199</td>\n<td>都是信息性的，标示客户应该采取的其他动作</td>\n</tr>\n<tr>\n<td>200-299</td>\n<td>标示请求成功</td>\n</tr>\n<tr>\n<td>300-399</td>\n<td>用于已移走的文件，常常包括Location报头，指出新的地址</td>\n</tr>\n<tr>\n<td>400-499</td>\n<td>表明由客户引发的错误</td>\n</tr>\n<tr>\n<td>500-599</td>\n<td>表示由服务器引发的错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Http相应报头\"><a href=\"#Http相应报头\" class=\"headerlink\" title=\"Http相应报头\"></a>Http相应报头</h2><p>指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setHeader（String headerName,String headerValue）</div></pre></td></tr></table></figure>\n<p>Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。</p>\n","site":{"data":{}},"excerpt":"<p>在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。</p>\n<h1 id=\"Servlet简介\"><a href=\"#Servlet简介\" class=\"headerlink\" title=\"Servlet简介\"></a>Servlet简介</h1><h2 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"Servlet的生命周期\"></a>Servlet的生命周期</h2><p>服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。</p>\n<p>Servlet 生命周期：Servlet 加载—&gt;实例化—&gt;服务—&gt;销毁。</p>\n<ol>\n<li><p>init（）：在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。</p>\n</li>\n<li><p>service（）：它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。</p>\n</li>\n<li><p>destroy（）： 仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。</p>\n</li>\n</ol>\n<p>Servlet架构图如下：</p>\n<p><img src=\"/blogRecord/2017/04/13/Servlet与JSP/ServletLifeCycle.jpg\" alt=\"Servlet生命周期\"></p>","more":"<h2 id=\"Servlet的工作流程\"><a href=\"#Servlet的工作流程\" class=\"headerlink\" title=\"Servlet的工作流程\"></a>Servlet的工作流程</h2><ol>\n<li>Web Client 向Servlet容器（Tomcat）发出Http请求</li>\n<li>Servlet容器接收Web Client的请求</li>\n<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。</li>\n<li>Servlet容器创建一个HttpResponse对象</li>\n<li>Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet 对象。</li>\n<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。</li>\n<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据。</li>\n<li>Servlet容器把HttpServlet的响应结果传给Web Client。</li>\n</ol>\n<h2 id=\"Servlet的创建\"><a href=\"#Servlet的创建\" class=\"headerlink\" title=\"Servlet的创建\"></a>Servlet的创建</h2><ol>\n<li><p>Servlet容器启动时：读取web.xml配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。</p>\n</li>\n<li><p>在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet对象的service方法。</p>\n</li>\n<li><p>Servlet Servlet容器在启动时自动创建Servlet，这是由在web.xml文件中为Servlet设置的<load-on-startup>属性决定的。从中我们也能看到同一个类型的Servlet对象在Servlet容器中以单例的形式存在。</load-on-startup></p>\n</li>\n</ol>\n<h1 id=\"Servlet的配置\"><a href=\"#Servlet的配置\" class=\"headerlink\" title=\"Servlet的配置\"></a>Servlet的配置</h1><h2 id=\"映射配置\"><a href=\"#映射配置\" class=\"headerlink\" title=\"映射配置\"></a>映射配置</h2><h3 id=\"web-xml配置\"><a href=\"#web-xml配置\" class=\"headerlink\" title=\"web.xml配置\"></a>web.xml配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>jp.co.xiehl.servlet.ch7.HelloWorldServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">//servlet映射配置</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">访问时：localhost:8080/工程名/hello即可。</div></pre></td></tr></table></figure>\n<h3 id=\"servlet3-0-注解\"><a href=\"#servlet3-0-注解\" class=\"headerlink\" title=\"servlet3.0 注解\"></a>servlet3.0 注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@WebServlet</span>(name=”Hello”, urlPatterns=&#123;“/hello.view”&#125;, loadOnStartup=<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子表示为，name为Hello的servlet，url为hello.view的。</p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的：</p>\n<ul>\n<li>在客户端请求访问后端资源之前，拦截请求</li>\n<li>在服务端的响应发送客户端之前，处理响应</li>\n</ul>\n<h3 id=\"实现过滤器接口\"><a href=\"#实现过滤器接口\" class=\"headerlink\" title=\"实现过滤器接口\"></a>实现过滤器接口</h3><p>过滤器是实现<code>javax.servlet.Filter</code>接口的类。接口包含以下三个方法：<br><img src=\"/blogRecord/2017/04/13/Servlet与JSP/filter.png\" alt=\"Filter interface\"></p>\n<p>过滤器示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入必需的 java 库</span></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现 Filter 类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span>  </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">init</span><span class=\"params\">(FilterConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 获取初始化参数</span></div><div class=\"line\">\t\tString site = config.getInitParameter(<span class=\"string\">\"Site\"</span>); </div><div class=\"line\">\t\t<span class=\"comment\">// 输出初始化参数</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"网站名称: \"</span> + site); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 输出站点名称</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"站点网址：http://www.runoob.com\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 把请求传回过滤链</span></div><div class=\"line\">\t\tchain.doFilter(request,response);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"xml配置过滤器\"><a href=\"#xml配置过滤器\" class=\"headerlink\" title=\"xml配置过滤器\"></a>xml配置过滤器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>指定一个过滤器。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>用于为过滤器指定一个名字，该元素的内容不能为空。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>元素用于指定过滤器的完整的限定类名。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span>元素用于为过滤器指定初始化参数，它的子元素</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>指定参数的名字，</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>指定参数的值。在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>子元素用于设置filter的注册名称。该值必须是在<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>元素中声明过的过滤器的名字</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>设置 filter 所拦截的请求路径(过滤器关联的URL样式)</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>指定过滤器所拦截的Servlet名称。</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>子元素用来指定 Filter 对资源的多种调用方式进行拦截。</div></pre></td></tr></table></figure>\n<p><dispatcher>子元素可以设置的值及其意义</dispatcher></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>REQUEST</td>\n<td>当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。</td>\n</tr>\n<tr>\n<td>INCLUDE</td>\n<td>如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</td>\n</tr>\n<tr>\n<td>FORWARD</td>\n<td>如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-状态代码\"><a href=\"#2-状态代码\" class=\"headerlink\" title=\"2. 状态代码\"></a>2. 状态代码</h2><p>Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。</p>\n<h3 id=\"设置状态代码：setStatus\"><a href=\"#设置状态代码：setStatus\" class=\"headerlink\" title=\"设置状态代码：setStatus\"></a>设置状态代码：setStatus</h3><blockquote>\n<p>在向客户程序发送任何文档内容之前设置状态代码</p>\n</blockquote>\n<p>setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。</p>\n<p>Http1.1中可用的特定的状态代码，如下</p>\n<table>\n<thead>\n<tr>\n<th>代码区间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100-199</td>\n<td>都是信息性的，标示客户应该采取的其他动作</td>\n</tr>\n<tr>\n<td>200-299</td>\n<td>标示请求成功</td>\n</tr>\n<tr>\n<td>300-399</td>\n<td>用于已移走的文件，常常包括Location报头，指出新的地址</td>\n</tr>\n<tr>\n<td>400-499</td>\n<td>表明由客户引发的错误</td>\n</tr>\n<tr>\n<td>500-599</td>\n<td>表示由服务器引发的错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Http相应报头\"><a href=\"#Http相应报头\" class=\"headerlink\" title=\"Http相应报头\"></a>Http相应报头</h2><p>指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setHeader（String headerName,String headerValue）</div></pre></td></tr></table></figure>\n<p>Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。</p>"},{"title":"struts2源码阅读","date":"2017-04-25T05:46:42.000Z","toc":true,"_content":"<!---->\n# Struts2运行原理\n\nStruts2基于Servlet框架的filter机制实现。\n```xml\n<filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n</filter>\n<filter-mapping>\n     <filter-name>struts2</filter-name>\n     <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n当tomcat启动时，会通过初始化StrutsPrepareAndExecuteFilter加载struts2的相关配置信息。\n系统运行时，会拦截request请求，执行struts2的流程。\n\n<!-- more -->\n\n## request处理流程\n\n1. 客户端发送请求\n2. 请求先通过StrutsPrepareAndExecuteFilter\n3. StrutsPrepareAndExecuteFilter通过ActionMapper来决定这个Request需要调用哪个Action\n4. 如果ActionMapper决定调用某个Action，StrutsPrepareAndExecuteFilter把请求的处理\n交给ActionProxy，这儿已经转到它的Delegate--Dispatcher来执行\n5. ActionProxy根据ActionMapping和ConfigurationManager找到需要调用的Action类\n6. ActionProxy创建一个ActionInvocation的实例\n7. ActionInvocation调用真正的Action，当然这涉及到相关拦截器的调用\n8. Action执行完毕，ActionInvocation创建Result并返回，当然，如果要在返回之前做些什么，\n可以实现PreResultListener。添加PreResultListener可以在Interceptor中实现，不知道其它还有什么方式？\n\n## 相关概念\n\n### ActionMapper\n提供Http请求和Action之间的映射，基本上不需要访问struts的配置文件来确定request和action的关系。\n\n默认的使用DefaultActionMapper，同时可以使用自定义Mapper，但是必须要实现`mapper.ActionMapper`接口，并且有一个默认的构造器。\n\nActionMapper会根据request获取相应的ActionMapping，ActionMapping包含了action的类和方法等详细信息。\n\n### ActionProxy & ActionInvocation\nActionProxy由ActionProxyFactory创建，是Action的代理，用来获取获取Action类，也可以被远程使用。\n\nActionProxy会使用ActionInvocation封装特定request的action，ActionInvocation决定action的动作，执行、拦截、监听。\n\n简而言之，ActionProxy封装request可以获得的action，ActionInvocation封装action如何执行。\n\n### ConfigurationProvider & Configuration\nConfigurationProvider就是Struts2中配置文件的解析器，Struts2中的配置文件主要是使用StrutsXmlConfigurationProvider来载入xml文件的配置信息。\nprovider可以通过DispatcherListener进行配置。\n\n# Struts2初始化\n\nStruts2通过初始化`StrutsPrepareAndExecuteFilter`，加载配置信息。StrutsPrepareAndExecuteFilter的初始化过程如下：\n\n```java\n /*\n    学习点：1.面向接口编程，耦合度低\n           2.适配器模式\n */\n public void init(FilterConfig filterConfig) throws ServletException {\n        //封装了初始化动作的类\n        InitOperations init = new InitOperations();\n        Dispatcher dispatcher = null;\n        try {\n            //对filter配置进行封装，此处有点类似代理模式类型\n            FilterHostConfig config = new FilterHostConfig(filterConfig);\n            //初始化log\n            init.initLogging(config);\n            //创建dispatcher对象\n            dispatcher = init.initDispatcher(config);\n            //初始化静态资源加载器 \n            init.initStaticContentLoader(config, dispatcher);\n            \n            //初始化prepare（封装请求预处理操作）\n            prepare = new PrepareOperations(dispatcher);\n            //初始化excute (封装了请求处理操作)\n            execute = new ExecuteOperations(dispatcher);\n            this.excludedPatterns = init.buildExcludedPatternsList(dispatcher);\n\n            //初始化完成回调方法，默认为空\n            postInit(dispatcher, filterConfig);\n        } finally {\n            //清理\n            if (dispatcher != null) {\n                dispatcher.cleanUpAfterInit();\n            }\n            init.cleanup();\n        }\n    }\n```\n## 配置信息封装\n\n传入`FilterConfig`接口的实例，然后封装为`HostConfig`的实例`FilterHostConfig`。在创建的过程中，调用方法的入参类型大都为`HostConfig`类型。\n```java\n/*\n    FilterConfig 为接口\n*/\npublic class FilterHostConfig implements HostConfig {\n\n    private FilterConfig config;\n    \n    public FilterHostConfig(FilterConfig config) {\n        this.config = config;\n    }\n    public String getInitParameter(String key) {\n        return config.getInitParameter(key);\n    }\n\n    public Iterator<String> getInitParameterNames() {\n        return MakeIterator.convert(config.getInitParameterNames());\n    }\n\n    public ServletContext getServletContext() {\n        return config.getServletContext();\n    }\n}\n```\n\n## logging信息配置\n\n学习:\n1. 利用配置信息很灵活的提供数据，创建`LoggerFactory`\n2. 命名规范，工厂模式以`Factory`后缀命名\n\n```java\n    /**\n     * Initializes the internal Struts logging\n     */\n    public void initLogging( HostConfig filterConfig ) {\n        //从配置信息中，读取loggerFactory配置信息\n        String factoryName = filterConfig.getInitParameter(\"loggerFactory\");\n        if (factoryName != null) {\n            try {\n                //利用反射创建LoggerFactory\n                Class cls = ClassLoaderUtil.loadClass(factoryName, this.getClass());\n                LoggerFactory fac = (LoggerFactory) cls.newInstance();\n                LoggerFactory.setLoggerFactory(fac);\n            } catch ( InstantiationException e ) {\n                System.err.println(\"Unable to instantiate logger factory: \" + factoryName + \", using default\");\n                e.printStackTrace();\n            } catch ( IllegalAccessException e ) {\n                System.err.println(\"Unable to access logger factory: \" + factoryName + \", using default\");\n                e.printStackTrace();\n            } catch ( ClassNotFoundException e ) {\n                System.err.println(\"Unable to locate logger factory class: \" + factoryName + \", using default\");\n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n学习：\n1. 在多线程的环境下，创建对象。\n\n```java\n  public static void setLoggerFactory(LoggerFactory factory) {\n        //创建写锁\n        lock.writeLock().lock();\n        try {\n            LoggerFactory.factory = factory;\n        } finally {\n            //在finally内释放写锁\n            lock.writeLock().unlock();\n        }\n    }\n```\n\n在这个过程中，`ClassLoaderUtil`是一个载入资源和类的工具，反射类的代码如下。\n\n> 学习：\n    1. 异常的处理形式 \n    2. 获取反射的优先级处理\n\n```java\n /* @param 类名    The name of the class to load\n  * @param 调用方法的类 The Class object of the calling object\n  * @throws ClassNotFoundException If the class cannot be found anywhere.\n  */\npublic static Class loadClass(String className, Class callingClass) throws ClassNotFoundException {\n        try {\n            //从当前线程获取ClassLoader，然后反射对象\n            return Thread.currentThread().getContextClassLoader().loadClass(className);\n        } catch (ClassNotFoundException e) {\n            try {\n                //直接获取\n                return Class.forName(className);\n            } catch (ClassNotFoundException ex) {\n                try {\n                    //从ClassLoaderUtil获取ClassLoader\n                    return ClassLoaderUtil.class.getClassLoader().loadClass(className);\n                } catch (ClassNotFoundException exc) {\n                    //从callingClass获取ClassLoader\n                    return callingClass.getClassLoader().loadClass(className);\n                }\n            }\n        }\n    }\n```\n\n## 创建dispatcher（分配器）\n\n传入配置信息（形参为HostConfig接口，非常灵活！），返回dispatcher。\n```java\n  public Dispatcher initDispatcher( HostConfig filterConfig ) {\n        //利用filterConfig信息，创建Dispatcher对象\n        Dispatcher dispatcher = createDispatcher(filterConfig);\n        dispatcher.init();\n        return dispatcher;\n    }\n```\n\n`Dispatcher`的创建过程，其实就是数据转换，赋值的过程\n```java\n private Dispatcher createDispatcher( HostConfig filterConfig ) {\n        //获取配置信息里的信息\n        Map<String, String> params = new HashMap<String, String>();\n        for ( Iterator e = filterConfig.getInitParameterNames(); e.hasNext(); ) {\n            String name = (String) e.next();\n            String value = filterConfig.getInitParameter(name);\n            params.put(name, value);\n        }\n\n        //利用配置信息和ServletContext创建\n        return new Dispatcher(filterConfig.getServletContext(), params);\n    }\n```\n\n`dispatcher`的初始化过程比较复杂，很多初始化过程都在其中包含。\n```java\n    public void init() {\n\n    \tif (configurationManager == null) {\n    \t\tconfigurationManager = createConfigurationManager(DefaultBeanSelectionProvider.DEFAULT_BEAN_NAME);\n    \t}\n\n        try {\n            //初始化文件管理\n            init_FileManager();\n            //加载org/apache/struts2/default.properties\n            init_DefaultProperties(); // [1]\n            //加载struts-default.xml,struts-plugin.xml,struts.xml\n            init_TraditionalXmlConfigurations(); // [2]      \n            init_LegacyStrutsProperties(); // [3]\n            //用户自己实现的ConfigurationProviders类 \n            init_CustomConfigurationProviders(); // [5]\n            //Filter的初始化参数\n            init_FilterInitParameters() ; // [6]\n            init_AliasStandardObjects() ; // [7]\n\n            //容器\n            Container container = init_PreloadConfiguration();\n            container.inject(this);\n            init_CheckWebLogicWorkaround(container);\n\n            //监听器\n            if (!dispatcherListeners.isEmpty()) {\n                for (DispatcherListener l : dispatcherListeners) {\n                    l.dispatcherInitialized(this);\n                }\n            }\n            errorHandler.init(servletContext);\n\n        } catch (Exception ex) {\n            if (LOG.isErrorEnabled())\n                LOG.error(\"Dispatcher initialization failed\", ex);\n            throw new StrutsException(ex);\n        }\n    }\n```\n\n\n","source":"_posts/struts2源码阅读.md","raw":"---\ntitle: struts2源码阅读\ndate: 2017-04-25 13:46:42\ncategory: Java\ntags: struts2\ntoc: true\n---\n<!---->\n# Struts2运行原理\n\nStruts2基于Servlet框架的filter机制实现。\n```xml\n<filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n</filter>\n<filter-mapping>\n     <filter-name>struts2</filter-name>\n     <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n当tomcat启动时，会通过初始化StrutsPrepareAndExecuteFilter加载struts2的相关配置信息。\n系统运行时，会拦截request请求，执行struts2的流程。\n\n<!-- more -->\n\n## request处理流程\n\n1. 客户端发送请求\n2. 请求先通过StrutsPrepareAndExecuteFilter\n3. StrutsPrepareAndExecuteFilter通过ActionMapper来决定这个Request需要调用哪个Action\n4. 如果ActionMapper决定调用某个Action，StrutsPrepareAndExecuteFilter把请求的处理\n交给ActionProxy，这儿已经转到它的Delegate--Dispatcher来执行\n5. ActionProxy根据ActionMapping和ConfigurationManager找到需要调用的Action类\n6. ActionProxy创建一个ActionInvocation的实例\n7. ActionInvocation调用真正的Action，当然这涉及到相关拦截器的调用\n8. Action执行完毕，ActionInvocation创建Result并返回，当然，如果要在返回之前做些什么，\n可以实现PreResultListener。添加PreResultListener可以在Interceptor中实现，不知道其它还有什么方式？\n\n## 相关概念\n\n### ActionMapper\n提供Http请求和Action之间的映射，基本上不需要访问struts的配置文件来确定request和action的关系。\n\n默认的使用DefaultActionMapper，同时可以使用自定义Mapper，但是必须要实现`mapper.ActionMapper`接口，并且有一个默认的构造器。\n\nActionMapper会根据request获取相应的ActionMapping，ActionMapping包含了action的类和方法等详细信息。\n\n### ActionProxy & ActionInvocation\nActionProxy由ActionProxyFactory创建，是Action的代理，用来获取获取Action类，也可以被远程使用。\n\nActionProxy会使用ActionInvocation封装特定request的action，ActionInvocation决定action的动作，执行、拦截、监听。\n\n简而言之，ActionProxy封装request可以获得的action，ActionInvocation封装action如何执行。\n\n### ConfigurationProvider & Configuration\nConfigurationProvider就是Struts2中配置文件的解析器，Struts2中的配置文件主要是使用StrutsXmlConfigurationProvider来载入xml文件的配置信息。\nprovider可以通过DispatcherListener进行配置。\n\n# Struts2初始化\n\nStruts2通过初始化`StrutsPrepareAndExecuteFilter`，加载配置信息。StrutsPrepareAndExecuteFilter的初始化过程如下：\n\n```java\n /*\n    学习点：1.面向接口编程，耦合度低\n           2.适配器模式\n */\n public void init(FilterConfig filterConfig) throws ServletException {\n        //封装了初始化动作的类\n        InitOperations init = new InitOperations();\n        Dispatcher dispatcher = null;\n        try {\n            //对filter配置进行封装，此处有点类似代理模式类型\n            FilterHostConfig config = new FilterHostConfig(filterConfig);\n            //初始化log\n            init.initLogging(config);\n            //创建dispatcher对象\n            dispatcher = init.initDispatcher(config);\n            //初始化静态资源加载器 \n            init.initStaticContentLoader(config, dispatcher);\n            \n            //初始化prepare（封装请求预处理操作）\n            prepare = new PrepareOperations(dispatcher);\n            //初始化excute (封装了请求处理操作)\n            execute = new ExecuteOperations(dispatcher);\n            this.excludedPatterns = init.buildExcludedPatternsList(dispatcher);\n\n            //初始化完成回调方法，默认为空\n            postInit(dispatcher, filterConfig);\n        } finally {\n            //清理\n            if (dispatcher != null) {\n                dispatcher.cleanUpAfterInit();\n            }\n            init.cleanup();\n        }\n    }\n```\n## 配置信息封装\n\n传入`FilterConfig`接口的实例，然后封装为`HostConfig`的实例`FilterHostConfig`。在创建的过程中，调用方法的入参类型大都为`HostConfig`类型。\n```java\n/*\n    FilterConfig 为接口\n*/\npublic class FilterHostConfig implements HostConfig {\n\n    private FilterConfig config;\n    \n    public FilterHostConfig(FilterConfig config) {\n        this.config = config;\n    }\n    public String getInitParameter(String key) {\n        return config.getInitParameter(key);\n    }\n\n    public Iterator<String> getInitParameterNames() {\n        return MakeIterator.convert(config.getInitParameterNames());\n    }\n\n    public ServletContext getServletContext() {\n        return config.getServletContext();\n    }\n}\n```\n\n## logging信息配置\n\n学习:\n1. 利用配置信息很灵活的提供数据，创建`LoggerFactory`\n2. 命名规范，工厂模式以`Factory`后缀命名\n\n```java\n    /**\n     * Initializes the internal Struts logging\n     */\n    public void initLogging( HostConfig filterConfig ) {\n        //从配置信息中，读取loggerFactory配置信息\n        String factoryName = filterConfig.getInitParameter(\"loggerFactory\");\n        if (factoryName != null) {\n            try {\n                //利用反射创建LoggerFactory\n                Class cls = ClassLoaderUtil.loadClass(factoryName, this.getClass());\n                LoggerFactory fac = (LoggerFactory) cls.newInstance();\n                LoggerFactory.setLoggerFactory(fac);\n            } catch ( InstantiationException e ) {\n                System.err.println(\"Unable to instantiate logger factory: \" + factoryName + \", using default\");\n                e.printStackTrace();\n            } catch ( IllegalAccessException e ) {\n                System.err.println(\"Unable to access logger factory: \" + factoryName + \", using default\");\n                e.printStackTrace();\n            } catch ( ClassNotFoundException e ) {\n                System.err.println(\"Unable to locate logger factory class: \" + factoryName + \", using default\");\n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n学习：\n1. 在多线程的环境下，创建对象。\n\n```java\n  public static void setLoggerFactory(LoggerFactory factory) {\n        //创建写锁\n        lock.writeLock().lock();\n        try {\n            LoggerFactory.factory = factory;\n        } finally {\n            //在finally内释放写锁\n            lock.writeLock().unlock();\n        }\n    }\n```\n\n在这个过程中，`ClassLoaderUtil`是一个载入资源和类的工具，反射类的代码如下。\n\n> 学习：\n    1. 异常的处理形式 \n    2. 获取反射的优先级处理\n\n```java\n /* @param 类名    The name of the class to load\n  * @param 调用方法的类 The Class object of the calling object\n  * @throws ClassNotFoundException If the class cannot be found anywhere.\n  */\npublic static Class loadClass(String className, Class callingClass) throws ClassNotFoundException {\n        try {\n            //从当前线程获取ClassLoader，然后反射对象\n            return Thread.currentThread().getContextClassLoader().loadClass(className);\n        } catch (ClassNotFoundException e) {\n            try {\n                //直接获取\n                return Class.forName(className);\n            } catch (ClassNotFoundException ex) {\n                try {\n                    //从ClassLoaderUtil获取ClassLoader\n                    return ClassLoaderUtil.class.getClassLoader().loadClass(className);\n                } catch (ClassNotFoundException exc) {\n                    //从callingClass获取ClassLoader\n                    return callingClass.getClassLoader().loadClass(className);\n                }\n            }\n        }\n    }\n```\n\n## 创建dispatcher（分配器）\n\n传入配置信息（形参为HostConfig接口，非常灵活！），返回dispatcher。\n```java\n  public Dispatcher initDispatcher( HostConfig filterConfig ) {\n        //利用filterConfig信息，创建Dispatcher对象\n        Dispatcher dispatcher = createDispatcher(filterConfig);\n        dispatcher.init();\n        return dispatcher;\n    }\n```\n\n`Dispatcher`的创建过程，其实就是数据转换，赋值的过程\n```java\n private Dispatcher createDispatcher( HostConfig filterConfig ) {\n        //获取配置信息里的信息\n        Map<String, String> params = new HashMap<String, String>();\n        for ( Iterator e = filterConfig.getInitParameterNames(); e.hasNext(); ) {\n            String name = (String) e.next();\n            String value = filterConfig.getInitParameter(name);\n            params.put(name, value);\n        }\n\n        //利用配置信息和ServletContext创建\n        return new Dispatcher(filterConfig.getServletContext(), params);\n    }\n```\n\n`dispatcher`的初始化过程比较复杂，很多初始化过程都在其中包含。\n```java\n    public void init() {\n\n    \tif (configurationManager == null) {\n    \t\tconfigurationManager = createConfigurationManager(DefaultBeanSelectionProvider.DEFAULT_BEAN_NAME);\n    \t}\n\n        try {\n            //初始化文件管理\n            init_FileManager();\n            //加载org/apache/struts2/default.properties\n            init_DefaultProperties(); // [1]\n            //加载struts-default.xml,struts-plugin.xml,struts.xml\n            init_TraditionalXmlConfigurations(); // [2]      \n            init_LegacyStrutsProperties(); // [3]\n            //用户自己实现的ConfigurationProviders类 \n            init_CustomConfigurationProviders(); // [5]\n            //Filter的初始化参数\n            init_FilterInitParameters() ; // [6]\n            init_AliasStandardObjects() ; // [7]\n\n            //容器\n            Container container = init_PreloadConfiguration();\n            container.inject(this);\n            init_CheckWebLogicWorkaround(container);\n\n            //监听器\n            if (!dispatcherListeners.isEmpty()) {\n                for (DispatcherListener l : dispatcherListeners) {\n                    l.dispatcherInitialized(this);\n                }\n            }\n            errorHandler.init(servletContext);\n\n        } catch (Exception ex) {\n            if (LOG.isErrorEnabled())\n                LOG.error(\"Dispatcher initialization failed\", ex);\n            throw new StrutsException(ex);\n        }\n    }\n```\n\n\n","slug":"struts2源码阅读","published":1,"updated":"2017-05-22T09:28:35.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj300kwbj0006qwluklp3v2ok","content":"<!---->\n<h1 id=\"Struts2运行原理\"><a href=\"#Struts2运行原理\" class=\"headerlink\" title=\"Struts2运行原理\"></a>Struts2运行原理</h1><p>Struts2基于Servlet框架的filter机制实现。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当tomcat启动时，会通过初始化StrutsPrepareAndExecuteFilter加载struts2的相关配置信息。<br>系统运行时，会拦截request请求，执行struts2的流程。</p>\n<a id=\"more\"></a>\n<h2 id=\"request处理流程\"><a href=\"#request处理流程\" class=\"headerlink\" title=\"request处理流程\"></a>request处理流程</h2><ol>\n<li>客户端发送请求</li>\n<li>请求先通过StrutsPrepareAndExecuteFilter</li>\n<li>StrutsPrepareAndExecuteFilter通过ActionMapper来决定这个Request需要调用哪个Action</li>\n<li>如果ActionMapper决定调用某个Action，StrutsPrepareAndExecuteFilter把请求的处理<br>交给ActionProxy，这儿已经转到它的Delegate–Dispatcher来执行</li>\n<li>ActionProxy根据ActionMapping和ConfigurationManager找到需要调用的Action类</li>\n<li>ActionProxy创建一个ActionInvocation的实例</li>\n<li>ActionInvocation调用真正的Action，当然这涉及到相关拦截器的调用</li>\n<li>Action执行完毕，ActionInvocation创建Result并返回，当然，如果要在返回之前做些什么，<br>可以实现PreResultListener。添加PreResultListener可以在Interceptor中实现，不知道其它还有什么方式？</li>\n</ol>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"ActionMapper\"><a href=\"#ActionMapper\" class=\"headerlink\" title=\"ActionMapper\"></a>ActionMapper</h3><p>提供Http请求和Action之间的映射，基本上不需要访问struts的配置文件来确定request和action的关系。</p>\n<p>默认的使用DefaultActionMapper，同时可以使用自定义Mapper，但是必须要实现<code>mapper.ActionMapper</code>接口，并且有一个默认的构造器。</p>\n<p>ActionMapper会根据request获取相应的ActionMapping，ActionMapping包含了action的类和方法等详细信息。</p>\n<h3 id=\"ActionProxy-amp-ActionInvocation\"><a href=\"#ActionProxy-amp-ActionInvocation\" class=\"headerlink\" title=\"ActionProxy &amp; ActionInvocation\"></a>ActionProxy &amp; ActionInvocation</h3><p>ActionProxy由ActionProxyFactory创建，是Action的代理，用来获取获取Action类，也可以被远程使用。</p>\n<p>ActionProxy会使用ActionInvocation封装特定request的action，ActionInvocation决定action的动作，执行、拦截、监听。</p>\n<p>简而言之，ActionProxy封装request可以获得的action，ActionInvocation封装action如何执行。</p>\n<h3 id=\"ConfigurationProvider-amp-Configuration\"><a href=\"#ConfigurationProvider-amp-Configuration\" class=\"headerlink\" title=\"ConfigurationProvider &amp; Configuration\"></a>ConfigurationProvider &amp; Configuration</h3><p>ConfigurationProvider就是Struts2中配置文件的解析器，Struts2中的配置文件主要是使用StrutsXmlConfigurationProvider来载入xml文件的配置信息。<br>provider可以通过DispatcherListener进行配置。</p>\n<h1 id=\"Struts2初始化\"><a href=\"#Struts2初始化\" class=\"headerlink\" title=\"Struts2初始化\"></a>Struts2初始化</h1><p>Struts2通过初始化<code>StrutsPrepareAndExecuteFilter</code>，加载配置信息。StrutsPrepareAndExecuteFilter的初始化过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   学习点：1.面向接口编程，耦合度低</div><div class=\"line\">          2.适配器模式</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//封装了初始化动作的类</span></div><div class=\"line\">       InitOperations init = <span class=\"keyword\">new</span> InitOperations();</div><div class=\"line\">       Dispatcher dispatcher = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"comment\">//对filter配置进行封装，此处有点类似代理模式类型</span></div><div class=\"line\">           FilterHostConfig config = <span class=\"keyword\">new</span> FilterHostConfig(filterConfig);</div><div class=\"line\">           <span class=\"comment\">//初始化log</span></div><div class=\"line\">           init.initLogging(config);</div><div class=\"line\">           <span class=\"comment\">//创建dispatcher对象</span></div><div class=\"line\">           dispatcher = init.initDispatcher(config);</div><div class=\"line\">           <span class=\"comment\">//初始化静态资源加载器 </span></div><div class=\"line\">           init.initStaticContentLoader(config, dispatcher);</div><div class=\"line\">           </div><div class=\"line\">           <span class=\"comment\">//初始化prepare（封装请求预处理操作）</span></div><div class=\"line\">           prepare = <span class=\"keyword\">new</span> PrepareOperations(dispatcher);</div><div class=\"line\">           <span class=\"comment\">//初始化excute (封装了请求处理操作)</span></div><div class=\"line\">           execute = <span class=\"keyword\">new</span> ExecuteOperations(dispatcher);</div><div class=\"line\">           <span class=\"keyword\">this</span>.excludedPatterns = init.buildExcludedPatternsList(dispatcher);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//初始化完成回调方法，默认为空</span></div><div class=\"line\">           postInit(dispatcher, filterConfig);</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"comment\">//清理</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (dispatcher != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               dispatcher.cleanUpAfterInit();</div><div class=\"line\">           &#125;</div><div class=\"line\">           init.cleanup();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"配置信息封装\"><a href=\"#配置信息封装\" class=\"headerlink\" title=\"配置信息封装\"></a>配置信息封装</h2><p>传入<code>FilterConfig</code>接口的实例，然后封装为<code>HostConfig</code>的实例<code>FilterHostConfig</code>。在创建的过程中，调用方法的入参类型大都为<code>HostConfig</code>类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    FilterConfig 为接口</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterHostConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">HostConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FilterConfig config;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FilterHostConfig</span><span class=\"params\">(FilterConfig config)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = config;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInitParameter</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> config.getInitParameter(key);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;String&gt; <span class=\"title\">getInitParameterNames</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> MakeIterator.convert(config.getInitParameterNames());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletContext <span class=\"title\">getServletContext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> config.getServletContext();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"logging信息配置\"><a href=\"#logging信息配置\" class=\"headerlink\" title=\"logging信息配置\"></a>logging信息配置</h2><p>学习:</p>\n<ol>\n<li>利用配置信息很灵活的提供数据，创建<code>LoggerFactory</code></li>\n<li>命名规范，工厂模式以<code>Factory</code>后缀命名</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Initializes the internal Struts logging</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initLogging</span><span class=\"params\">( HostConfig filterConfig )</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//从配置信息中，读取loggerFactory配置信息</span></div><div class=\"line\">    String factoryName = filterConfig.getInitParameter(<span class=\"string\">\"loggerFactory\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (factoryName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//利用反射创建LoggerFactory</span></div><div class=\"line\">            Class cls = ClassLoaderUtil.loadClass(factoryName, <span class=\"keyword\">this</span>.getClass());</div><div class=\"line\">            LoggerFactory fac = (LoggerFactory) cls.newInstance();</div><div class=\"line\">            LoggerFactory.setLoggerFactory(fac);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( InstantiationException e ) &#123;</div><div class=\"line\">            System.err.println(<span class=\"string\">\"Unable to instantiate logger factory: \"</span> + factoryName + <span class=\"string\">\", using default\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( IllegalAccessException e ) &#123;</div><div class=\"line\">            System.err.println(<span class=\"string\">\"Unable to access logger factory: \"</span> + factoryName + <span class=\"string\">\", using default\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( ClassNotFoundException e ) &#123;</div><div class=\"line\">            System.err.println(<span class=\"string\">\"Unable to locate logger factory class: \"</span> + factoryName + <span class=\"string\">\", using default\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>学习：</p>\n<ol>\n<li>在多线程的环境下，创建对象。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setLoggerFactory</span><span class=\"params\">(LoggerFactory factory)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//创建写锁</span></div><div class=\"line\">      lock.writeLock().lock();</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          LoggerFactory.factory = factory;</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//在finally内释放写锁</span></div><div class=\"line\">          lock.writeLock().unlock();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>在这个过程中，<code>ClassLoaderUtil</code>是一个载入资源和类的工具，反射类的代码如下。</p>\n<blockquote>\n<p>学习：</p>\n<pre><code>1. 异常的处理形式 \n2. 获取反射的优先级处理\n</code></pre></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/* @param 类名    The name of the class to load</span></div><div class=\"line\">  * @param 调用方法的类 The Class object of the calling object</div><div class=\"line\">  * @throws ClassNotFoundException If the class cannot be found anywhere.</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class <span class=\"title\">loadClass</span><span class=\"params\">(String className, Class callingClass)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//从当前线程获取ClassLoader，然后反射对象</span></div><div class=\"line\">            <span class=\"keyword\">return</span> Thread.currentThread().getContextClassLoader().loadClass(className);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//直接获取</span></div><div class=\"line\">                <span class=\"keyword\">return</span> Class.forName(className);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//从ClassLoaderUtil获取ClassLoader</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> ClassLoaderUtil.class.getClassLoader().loadClass(className);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException exc) &#123;</div><div class=\"line\">                    <span class=\"comment\">//从callingClass获取ClassLoader</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> callingClass.getClassLoader().loadClass(className);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"创建dispatcher（分配器）\"><a href=\"#创建dispatcher（分配器）\" class=\"headerlink\" title=\"创建dispatcher（分配器）\"></a>创建dispatcher（分配器）</h2><p>传入配置信息（形参为HostConfig接口，非常灵活！），返回dispatcher。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Dispatcher <span class=\"title\">initDispatcher</span><span class=\"params\">( HostConfig filterConfig )</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//利用filterConfig信息，创建Dispatcher对象</span></div><div class=\"line\">      Dispatcher dispatcher = createDispatcher(filterConfig);</div><div class=\"line\">      dispatcher.init();</div><div class=\"line\">      <span class=\"keyword\">return</span> dispatcher;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>Dispatcher</code>的创建过程，其实就是数据转换，赋值的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Dispatcher <span class=\"title\">createDispatcher</span><span class=\"params\">( HostConfig filterConfig )</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取配置信息里的信息</span></div><div class=\"line\">       Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">       <span class=\"keyword\">for</span> ( Iterator e = filterConfig.getInitParameterNames(); e.hasNext(); ) &#123;</div><div class=\"line\">           String name = (String) e.next();</div><div class=\"line\">           String value = filterConfig.getInitParameter(name);</div><div class=\"line\">           params.put(name, value);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//利用配置信息和ServletContext创建</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dispatcher(filterConfig.getServletContext(), params);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><code>dispatcher</code>的初始化过程比较复杂，很多初始化过程都在其中包含。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (configurationManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tconfigurationManager = createConfigurationManager(DefaultBeanSelectionProvider.DEFAULT_BEAN_NAME);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//初始化文件管理</span></div><div class=\"line\">        init_FileManager();</div><div class=\"line\">        <span class=\"comment\">//加载org/apache/struts2/default.properties</span></div><div class=\"line\">        init_DefaultProperties(); <span class=\"comment\">// [1]</span></div><div class=\"line\">        <span class=\"comment\">//加载struts-default.xml,struts-plugin.xml,struts.xml</span></div><div class=\"line\">        init_TraditionalXmlConfigurations(); <span class=\"comment\">// [2]      </span></div><div class=\"line\">        init_LegacyStrutsProperties(); <span class=\"comment\">// [3]</span></div><div class=\"line\">        <span class=\"comment\">//用户自己实现的ConfigurationProviders类 </span></div><div class=\"line\">        init_CustomConfigurationProviders(); <span class=\"comment\">// [5]</span></div><div class=\"line\">        <span class=\"comment\">//Filter的初始化参数</span></div><div class=\"line\">        init_FilterInitParameters() ; <span class=\"comment\">// [6]</span></div><div class=\"line\">        init_AliasStandardObjects() ; <span class=\"comment\">// [7]</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//容器</span></div><div class=\"line\">        Container container = init_PreloadConfiguration();</div><div class=\"line\">        container.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">        init_CheckWebLogicWorkaround(container);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//监听器</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!dispatcherListeners.isEmpty()) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (DispatcherListener l : dispatcherListeners) &#123;</div><div class=\"line\">                l.dispatcherInitialized(<span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        errorHandler.init(servletContext);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG.isErrorEnabled())</div><div class=\"line\">            LOG.error(<span class=\"string\">\"Dispatcher initialization failed\"</span>, ex);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StrutsException(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<!---->\n<h1 id=\"Struts2运行原理\"><a href=\"#Struts2运行原理\" class=\"headerlink\" title=\"Struts2运行原理\"></a>Struts2运行原理</h1><p>Struts2基于Servlet框架的filter机制实现。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当tomcat启动时，会通过初始化StrutsPrepareAndExecuteFilter加载struts2的相关配置信息。<br>系统运行时，会拦截request请求，执行struts2的流程。</p>","more":"<h2 id=\"request处理流程\"><a href=\"#request处理流程\" class=\"headerlink\" title=\"request处理流程\"></a>request处理流程</h2><ol>\n<li>客户端发送请求</li>\n<li>请求先通过StrutsPrepareAndExecuteFilter</li>\n<li>StrutsPrepareAndExecuteFilter通过ActionMapper来决定这个Request需要调用哪个Action</li>\n<li>如果ActionMapper决定调用某个Action，StrutsPrepareAndExecuteFilter把请求的处理<br>交给ActionProxy，这儿已经转到它的Delegate–Dispatcher来执行</li>\n<li>ActionProxy根据ActionMapping和ConfigurationManager找到需要调用的Action类</li>\n<li>ActionProxy创建一个ActionInvocation的实例</li>\n<li>ActionInvocation调用真正的Action，当然这涉及到相关拦截器的调用</li>\n<li>Action执行完毕，ActionInvocation创建Result并返回，当然，如果要在返回之前做些什么，<br>可以实现PreResultListener。添加PreResultListener可以在Interceptor中实现，不知道其它还有什么方式？</li>\n</ol>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"ActionMapper\"><a href=\"#ActionMapper\" class=\"headerlink\" title=\"ActionMapper\"></a>ActionMapper</h3><p>提供Http请求和Action之间的映射，基本上不需要访问struts的配置文件来确定request和action的关系。</p>\n<p>默认的使用DefaultActionMapper，同时可以使用自定义Mapper，但是必须要实现<code>mapper.ActionMapper</code>接口，并且有一个默认的构造器。</p>\n<p>ActionMapper会根据request获取相应的ActionMapping，ActionMapping包含了action的类和方法等详细信息。</p>\n<h3 id=\"ActionProxy-amp-ActionInvocation\"><a href=\"#ActionProxy-amp-ActionInvocation\" class=\"headerlink\" title=\"ActionProxy &amp; ActionInvocation\"></a>ActionProxy &amp; ActionInvocation</h3><p>ActionProxy由ActionProxyFactory创建，是Action的代理，用来获取获取Action类，也可以被远程使用。</p>\n<p>ActionProxy会使用ActionInvocation封装特定request的action，ActionInvocation决定action的动作，执行、拦截、监听。</p>\n<p>简而言之，ActionProxy封装request可以获得的action，ActionInvocation封装action如何执行。</p>\n<h3 id=\"ConfigurationProvider-amp-Configuration\"><a href=\"#ConfigurationProvider-amp-Configuration\" class=\"headerlink\" title=\"ConfigurationProvider &amp; Configuration\"></a>ConfigurationProvider &amp; Configuration</h3><p>ConfigurationProvider就是Struts2中配置文件的解析器，Struts2中的配置文件主要是使用StrutsXmlConfigurationProvider来载入xml文件的配置信息。<br>provider可以通过DispatcherListener进行配置。</p>\n<h1 id=\"Struts2初始化\"><a href=\"#Struts2初始化\" class=\"headerlink\" title=\"Struts2初始化\"></a>Struts2初始化</h1><p>Struts2通过初始化<code>StrutsPrepareAndExecuteFilter</code>，加载配置信息。StrutsPrepareAndExecuteFilter的初始化过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   学习点：1.面向接口编程，耦合度低</div><div class=\"line\">          2.适配器模式</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//封装了初始化动作的类</span></div><div class=\"line\">       InitOperations init = <span class=\"keyword\">new</span> InitOperations();</div><div class=\"line\">       Dispatcher dispatcher = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"comment\">//对filter配置进行封装，此处有点类似代理模式类型</span></div><div class=\"line\">           FilterHostConfig config = <span class=\"keyword\">new</span> FilterHostConfig(filterConfig);</div><div class=\"line\">           <span class=\"comment\">//初始化log</span></div><div class=\"line\">           init.initLogging(config);</div><div class=\"line\">           <span class=\"comment\">//创建dispatcher对象</span></div><div class=\"line\">           dispatcher = init.initDispatcher(config);</div><div class=\"line\">           <span class=\"comment\">//初始化静态资源加载器 </span></div><div class=\"line\">           init.initStaticContentLoader(config, dispatcher);</div><div class=\"line\">           </div><div class=\"line\">           <span class=\"comment\">//初始化prepare（封装请求预处理操作）</span></div><div class=\"line\">           prepare = <span class=\"keyword\">new</span> PrepareOperations(dispatcher);</div><div class=\"line\">           <span class=\"comment\">//初始化excute (封装了请求处理操作)</span></div><div class=\"line\">           execute = <span class=\"keyword\">new</span> ExecuteOperations(dispatcher);</div><div class=\"line\">           <span class=\"keyword\">this</span>.excludedPatterns = init.buildExcludedPatternsList(dispatcher);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//初始化完成回调方法，默认为空</span></div><div class=\"line\">           postInit(dispatcher, filterConfig);</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"comment\">//清理</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (dispatcher != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               dispatcher.cleanUpAfterInit();</div><div class=\"line\">           &#125;</div><div class=\"line\">           init.cleanup();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"配置信息封装\"><a href=\"#配置信息封装\" class=\"headerlink\" title=\"配置信息封装\"></a>配置信息封装</h2><p>传入<code>FilterConfig</code>接口的实例，然后封装为<code>HostConfig</code>的实例<code>FilterHostConfig</code>。在创建的过程中，调用方法的入参类型大都为<code>HostConfig</code>类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    FilterConfig 为接口</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterHostConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">HostConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FilterConfig config;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FilterHostConfig</span><span class=\"params\">(FilterConfig config)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = config;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInitParameter</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> config.getInitParameter(key);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;String&gt; <span class=\"title\">getInitParameterNames</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> MakeIterator.convert(config.getInitParameterNames());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletContext <span class=\"title\">getServletContext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> config.getServletContext();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"logging信息配置\"><a href=\"#logging信息配置\" class=\"headerlink\" title=\"logging信息配置\"></a>logging信息配置</h2><p>学习:</p>\n<ol>\n<li>利用配置信息很灵活的提供数据，创建<code>LoggerFactory</code></li>\n<li>命名规范，工厂模式以<code>Factory</code>后缀命名</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Initializes the internal Struts logging</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initLogging</span><span class=\"params\">( HostConfig filterConfig )</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//从配置信息中，读取loggerFactory配置信息</span></div><div class=\"line\">    String factoryName = filterConfig.getInitParameter(<span class=\"string\">\"loggerFactory\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (factoryName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//利用反射创建LoggerFactory</span></div><div class=\"line\">            Class cls = ClassLoaderUtil.loadClass(factoryName, <span class=\"keyword\">this</span>.getClass());</div><div class=\"line\">            LoggerFactory fac = (LoggerFactory) cls.newInstance();</div><div class=\"line\">            LoggerFactory.setLoggerFactory(fac);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( InstantiationException e ) &#123;</div><div class=\"line\">            System.err.println(<span class=\"string\">\"Unable to instantiate logger factory: \"</span> + factoryName + <span class=\"string\">\", using default\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( IllegalAccessException e ) &#123;</div><div class=\"line\">            System.err.println(<span class=\"string\">\"Unable to access logger factory: \"</span> + factoryName + <span class=\"string\">\", using default\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( ClassNotFoundException e ) &#123;</div><div class=\"line\">            System.err.println(<span class=\"string\">\"Unable to locate logger factory class: \"</span> + factoryName + <span class=\"string\">\", using default\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>学习：</p>\n<ol>\n<li>在多线程的环境下，创建对象。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setLoggerFactory</span><span class=\"params\">(LoggerFactory factory)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//创建写锁</span></div><div class=\"line\">      lock.writeLock().lock();</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          LoggerFactory.factory = factory;</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//在finally内释放写锁</span></div><div class=\"line\">          lock.writeLock().unlock();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>在这个过程中，<code>ClassLoaderUtil</code>是一个载入资源和类的工具，反射类的代码如下。</p>\n<blockquote>\n<p>学习：</p>\n<pre><code>1. 异常的处理形式 \n2. 获取反射的优先级处理\n</code></pre></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/* @param 类名    The name of the class to load</span></div><div class=\"line\">  * @param 调用方法的类 The Class object of the calling object</div><div class=\"line\">  * @throws ClassNotFoundException If the class cannot be found anywhere.</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class <span class=\"title\">loadClass</span><span class=\"params\">(String className, Class callingClass)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//从当前线程获取ClassLoader，然后反射对象</span></div><div class=\"line\">            <span class=\"keyword\">return</span> Thread.currentThread().getContextClassLoader().loadClass(className);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//直接获取</span></div><div class=\"line\">                <span class=\"keyword\">return</span> Class.forName(className);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//从ClassLoaderUtil获取ClassLoader</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> ClassLoaderUtil.class.getClassLoader().loadClass(className);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException exc) &#123;</div><div class=\"line\">                    <span class=\"comment\">//从callingClass获取ClassLoader</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> callingClass.getClassLoader().loadClass(className);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"创建dispatcher（分配器）\"><a href=\"#创建dispatcher（分配器）\" class=\"headerlink\" title=\"创建dispatcher（分配器）\"></a>创建dispatcher（分配器）</h2><p>传入配置信息（形参为HostConfig接口，非常灵活！），返回dispatcher。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Dispatcher <span class=\"title\">initDispatcher</span><span class=\"params\">( HostConfig filterConfig )</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//利用filterConfig信息，创建Dispatcher对象</span></div><div class=\"line\">      Dispatcher dispatcher = createDispatcher(filterConfig);</div><div class=\"line\">      dispatcher.init();</div><div class=\"line\">      <span class=\"keyword\">return</span> dispatcher;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>Dispatcher</code>的创建过程，其实就是数据转换，赋值的过程<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Dispatcher <span class=\"title\">createDispatcher</span><span class=\"params\">( HostConfig filterConfig )</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取配置信息里的信息</span></div><div class=\"line\">       Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">       <span class=\"keyword\">for</span> ( Iterator e = filterConfig.getInitParameterNames(); e.hasNext(); ) &#123;</div><div class=\"line\">           String name = (String) e.next();</div><div class=\"line\">           String value = filterConfig.getInitParameter(name);</div><div class=\"line\">           params.put(name, value);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//利用配置信息和ServletContext创建</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dispatcher(filterConfig.getServletContext(), params);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><code>dispatcher</code>的初始化过程比较复杂，很多初始化过程都在其中包含。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (configurationManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tconfigurationManager = createConfigurationManager(DefaultBeanSelectionProvider.DEFAULT_BEAN_NAME);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//初始化文件管理</span></div><div class=\"line\">        init_FileManager();</div><div class=\"line\">        <span class=\"comment\">//加载org/apache/struts2/default.properties</span></div><div class=\"line\">        init_DefaultProperties(); <span class=\"comment\">// [1]</span></div><div class=\"line\">        <span class=\"comment\">//加载struts-default.xml,struts-plugin.xml,struts.xml</span></div><div class=\"line\">        init_TraditionalXmlConfigurations(); <span class=\"comment\">// [2]      </span></div><div class=\"line\">        init_LegacyStrutsProperties(); <span class=\"comment\">// [3]</span></div><div class=\"line\">        <span class=\"comment\">//用户自己实现的ConfigurationProviders类 </span></div><div class=\"line\">        init_CustomConfigurationProviders(); <span class=\"comment\">// [5]</span></div><div class=\"line\">        <span class=\"comment\">//Filter的初始化参数</span></div><div class=\"line\">        init_FilterInitParameters() ; <span class=\"comment\">// [6]</span></div><div class=\"line\">        init_AliasStandardObjects() ; <span class=\"comment\">// [7]</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//容器</span></div><div class=\"line\">        Container container = init_PreloadConfiguration();</div><div class=\"line\">        container.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">        init_CheckWebLogicWorkaround(container);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//监听器</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!dispatcherListeners.isEmpty()) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (DispatcherListener l : dispatcherListeners) &#123;</div><div class=\"line\">                l.dispatcherInitialized(<span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        errorHandler.init(servletContext);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG.isErrorEnabled())</div><div class=\"line\">            LOG.error(<span class=\"string\">\"Dispatcher initialization failed\"</span>, ex);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StrutsException(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Http协议","date":"2017-04-14T02:43:19.000Z","toc":true,"_content":"\n大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。\n\n## Http简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n\n![image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB][1]\n\n\n<!-- more -->\n\n\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\n\nHTTP默认端口号为80，Https的默认端口为443。\n\n![image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB][2]\n\n### 特点\n\n1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n\n2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n\n3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n\n4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n\n5、支持B/S及C/S模式。\n\n\n### TCP & HTTP & UDP:\n\nTCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。\n\n|网络层|所包含协议|\n|---|---|\n|网络层|IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议|\n|传输层|TCP协议、UDP协议|\n|应用层|有FTP、HTTP、TELNET、SMTP、DNS等协议|\n\n因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。\n\n### socket\nsocket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。\n\nsocket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。\n\n## Http消息\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。\n### URL和URI区别\n|URI|URL|\n|---|---|\n|URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。|URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。|\n|Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的|采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等|\n|URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。|URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等|\n\n例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：\n\n1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;\n\n2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;\n\n3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;\n\n4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;\n\n5、释放 TCP连接;\n\n6、浏览器将该 html 文本并显示内容; 　　\n\n### 客户端请求消息\n客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。\n![image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB][3]\n\n#### Get请求\n```\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept    image/webp,image/*,*/*;q=0.8\nReferer    http://www.imooc.com/\nAccept-Encoding    gzip, deflate, sdch\nAccept-Language    zh-CN,zh;q=0.8\n```\n第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.\n\nGET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。\n\n第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息\n\n从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等\n\n第三部分：空行，请求头部后面的空行是必须的\n\n即使第四部分的请求数据为空，也必须有空行。\n\n第四部分：请求数据也叫主体，可以添加任意的其他数据。\n\n这个例子的请求数据为空。\n\n#### post请求\n```\nPOST / HTTP1.1\nHost:www.wrox.com\nUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type:application/x-www-form-urlencoded\nContent-Length:40\nConnection: Keep-Alive\n\nname=Professional%20Ajax&publisher=Wiley\n```\n第一部分：请求行，第一行明了是post请求，以及http1.1版本。\n第二部分：请求头部，第二行至第六行。\n第三部分：空行，第七行的空行。\n第四部分：请求数据，第八行。\n\n### 响应消息Response\n\nHTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。\n![image_1bdbg60ceq2slf71po2416m781g.png-110.7kB][4]\n\n## 请求方法和状态码\n### 请求方法\n根据HTTP标准，HTTP请求可以使用多种请求方法。\nHTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\nHTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n|序号|方法|描述|\n|---|---|---|\n|1|   GET\t|请求指定的页面信息，并返回实体主体。|\n|2|\tHEAD\t类|似于get请求，只不过返回的响应中没有具体的内容，用于获取报头|\n|3|\tPOST\t向|指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。|\n|4|\tPUT\t从客|户端向服务器传送的数据取代指定的文档的内容。|\n|5|\tDELETE|\t请求服务器删除指定的页面。|\n|6|CONNECT|\tHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。|\n|7|\tOPTION|S\t允许客户端查看服务器的性能。|\n|8|\tTRACE\t|回显服务器收到的请求，主要用于测试或诊断。|\n\n### 状态码\n当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。\nHTTP状态码的英文为HTTP Status Code。\n\n|分类\t|分类描述|\n|---|---|\n|1**|\t信息，服务器收到请求，需要请求者继续执行操作|\n|2**|\t成功，操作被成功接收并处理|\n|3**|\t重定向，需要进一步的操作以完成请求|\n|4**|\t客户端错误，请求包含语法错误或无法完成请求|\n|5**|\t服务器错误，服务器在处理请求的过程中发生了错误|\n\n常见的状态码\n```\n200 OK                        //客户端请求成功\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 \n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n```\n### HTTP content-type\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。\n\n### HTTP 响应头信息\nHTTP请求头提供了关于请求，响应或者其他的发送实体的信息。\n\n|应答头|说明|\n|---|---|\n|Allow|\t服务器支持哪些请求方法（如GET、POST等）。|\n|Content-Encoding|\t文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(\"Accept-Encoding\")）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。|\n|Content-Length\t|表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。|\n|Content-Type|\t表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。|\n|Date|\t当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。|\n|Expires|\t应该在什么时候认为文档已经过期，从而不再缓存它？|\n|Last-Modified|\t文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。|\n|Location|\t表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。|\n|Refresh\t|表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(\"Refresh\", \"5; URL=http://host/path\")让浏览器读取指定的页面。 |\n|Server|\t服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。|\n|Set-Cookie|\t设置和页面关联的Cookie。Servlet不应使用response.setHeader(\"Set-Cookie\", ...)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。|\n|WWW-Authenticate\t|客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(\"WWW-Authenticate\", \"BASIC realm=＼\"executives＼\"\")。 |\n\n## 补充\n### get和post区别\n\n* GET在浏览器回退时是无害的，而POST会再次提交请求。\n\n* GET产生的URL地址可以被Bookmark，而POST不可以。\n\n* GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n\n* GET请求只能进行url编码，而POST支持多种编码方式。\n\n* GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n\n* GET请求在URL中传送的参数是有长度限制的，而POST么有。\n\n* 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n\n* GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n\n* GET参数通过URL传递，POST放在Request body中。\n\n\n**GET和POST还有一个重大区别：**\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n\n因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？\n1. GET与POST都有自己的语义，不能随便混用。\n2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。\n3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。\n\n### Https\nHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。\n\n不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。\n>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。\n（2） 篡改风险（tampering）：第三方可以修改通信内容。\n（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。\n\nSSL/TLS协议是为了解决这三大风险而设计的，希望达到：\n>（1） 所有信息都是加密传播，第三方无法窃听。\n（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。\n（3） 配备身份证书，防止身份被冒充。\n\n![image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB][5]\n\n\n\n\n**参考文章**\n[1、HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n[2、HTTP 教程](http://www.runoob.com/http/http-intro.html)\n[3、看完还不懂HTTPS我直播吃翔](http://www.shellsec.com/news/38129.html)\n\n\n  [1]: http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\n  [2]: http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\n  [3]: http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\n  [4]: http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\n  [5]: http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png","source":"_posts/Http协议.md","raw":"---\ntitle: Http协议\ndate: 2017-04-14 10:43:19\ncategory: 网络\ntags: 协议\ntoc: true\n---\n\n大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。\n\n## Http简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n\n![image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB][1]\n\n\n<!-- more -->\n\n\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\n\nHTTP默认端口号为80，Https的默认端口为443。\n\n![image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB][2]\n\n### 特点\n\n1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n\n2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n\n3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n\n4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n\n5、支持B/S及C/S模式。\n\n\n### TCP & HTTP & UDP:\n\nTCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。\n\n|网络层|所包含协议|\n|---|---|\n|网络层|IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议|\n|传输层|TCP协议、UDP协议|\n|应用层|有FTP、HTTP、TELNET、SMTP、DNS等协议|\n\n因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。\n\n### socket\nsocket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。\n\nsocket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。\n\n## Http消息\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。\n### URL和URI区别\n|URI|URL|\n|---|---|\n|URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。|URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。|\n|Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的|采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等|\n|URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。|URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等|\n\n例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：\n\n1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;\n\n2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;\n\n3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;\n\n4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;\n\n5、释放 TCP连接;\n\n6、浏览器将该 html 文本并显示内容; 　　\n\n### 客户端请求消息\n客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。\n![image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB][3]\n\n#### Get请求\n```\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept    image/webp,image/*,*/*;q=0.8\nReferer    http://www.imooc.com/\nAccept-Encoding    gzip, deflate, sdch\nAccept-Language    zh-CN,zh;q=0.8\n```\n第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.\n\nGET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。\n\n第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息\n\n从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等\n\n第三部分：空行，请求头部后面的空行是必须的\n\n即使第四部分的请求数据为空，也必须有空行。\n\n第四部分：请求数据也叫主体，可以添加任意的其他数据。\n\n这个例子的请求数据为空。\n\n#### post请求\n```\nPOST / HTTP1.1\nHost:www.wrox.com\nUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type:application/x-www-form-urlencoded\nContent-Length:40\nConnection: Keep-Alive\n\nname=Professional%20Ajax&publisher=Wiley\n```\n第一部分：请求行，第一行明了是post请求，以及http1.1版本。\n第二部分：请求头部，第二行至第六行。\n第三部分：空行，第七行的空行。\n第四部分：请求数据，第八行。\n\n### 响应消息Response\n\nHTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。\n![image_1bdbg60ceq2slf71po2416m781g.png-110.7kB][4]\n\n## 请求方法和状态码\n### 请求方法\n根据HTTP标准，HTTP请求可以使用多种请求方法。\nHTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\nHTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n|序号|方法|描述|\n|---|---|---|\n|1|   GET\t|请求指定的页面信息，并返回实体主体。|\n|2|\tHEAD\t类|似于get请求，只不过返回的响应中没有具体的内容，用于获取报头|\n|3|\tPOST\t向|指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。|\n|4|\tPUT\t从客|户端向服务器传送的数据取代指定的文档的内容。|\n|5|\tDELETE|\t请求服务器删除指定的页面。|\n|6|CONNECT|\tHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。|\n|7|\tOPTION|S\t允许客户端查看服务器的性能。|\n|8|\tTRACE\t|回显服务器收到的请求，主要用于测试或诊断。|\n\n### 状态码\n当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。\nHTTP状态码的英文为HTTP Status Code。\n\n|分类\t|分类描述|\n|---|---|\n|1**|\t信息，服务器收到请求，需要请求者继续执行操作|\n|2**|\t成功，操作被成功接收并处理|\n|3**|\t重定向，需要进一步的操作以完成请求|\n|4**|\t客户端错误，请求包含语法错误或无法完成请求|\n|5**|\t服务器错误，服务器在处理请求的过程中发生了错误|\n\n常见的状态码\n```\n200 OK                        //客户端请求成功\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 \n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n```\n### HTTP content-type\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。\n\n### HTTP 响应头信息\nHTTP请求头提供了关于请求，响应或者其他的发送实体的信息。\n\n|应答头|说明|\n|---|---|\n|Allow|\t服务器支持哪些请求方法（如GET、POST等）。|\n|Content-Encoding|\t文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(\"Accept-Encoding\")）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。|\n|Content-Length\t|表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。|\n|Content-Type|\t表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。|\n|Date|\t当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。|\n|Expires|\t应该在什么时候认为文档已经过期，从而不再缓存它？|\n|Last-Modified|\t文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。|\n|Location|\t表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。|\n|Refresh\t|表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(\"Refresh\", \"5; URL=http://host/path\")让浏览器读取指定的页面。 |\n|Server|\t服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。|\n|Set-Cookie|\t设置和页面关联的Cookie。Servlet不应使用response.setHeader(\"Set-Cookie\", ...)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。|\n|WWW-Authenticate\t|客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(\"WWW-Authenticate\", \"BASIC realm=＼\"executives＼\"\")。 |\n\n## 补充\n### get和post区别\n\n* GET在浏览器回退时是无害的，而POST会再次提交请求。\n\n* GET产生的URL地址可以被Bookmark，而POST不可以。\n\n* GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n\n* GET请求只能进行url编码，而POST支持多种编码方式。\n\n* GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n\n* GET请求在URL中传送的参数是有长度限制的，而POST么有。\n\n* 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n\n* GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n\n* GET参数通过URL传递，POST放在Request body中。\n\n\n**GET和POST还有一个重大区别：**\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n\n因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？\n1. GET与POST都有自己的语义，不能随便混用。\n2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。\n3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。\n\n### Https\nHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。\n\n不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。\n>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。\n（2） 篡改风险（tampering）：第三方可以修改通信内容。\n（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。\n\nSSL/TLS协议是为了解决这三大风险而设计的，希望达到：\n>（1） 所有信息都是加密传播，第三方无法窃听。\n（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。\n（3） 配备身份证书，防止身份被冒充。\n\n![image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB][5]\n\n\n\n\n**参考文章**\n[1、HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n[2、HTTP 教程](http://www.runoob.com/http/http-intro.html)\n[3、看完还不懂HTTPS我直播吃翔](http://www.shellsec.com/news/38129.html)\n\n\n  [1]: http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\n  [2]: http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\n  [3]: http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\n  [4]: http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\n  [5]: http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png","slug":"Http协议","published":1,"updated":"2017-05-22T10:44:27.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj300kwbl0008qwluybty4yz6","content":"<p>大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。</p>\n<h2 id=\"Http简介\"><a href=\"#Http简介\" class=\"headerlink\" title=\"Http简介\"></a>Http简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\" alt=\"image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB\"></p>\n<a id=\"more\"></a>\n<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n<p>HTTP默认端口号为80，Https的默认端口为443。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\" alt=\"image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>\n<p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>\n<p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>\n<p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>\n<p>5、支持B/S及C/S模式。</p>\n<h3 id=\"TCP-amp-HTTP-amp-UDP\"><a href=\"#TCP-amp-HTTP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; HTTP &amp; UDP:\"></a>TCP &amp; HTTP &amp; UDP:</h3><p>TCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>网络层</th>\n<th>所包含协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络层</td>\n<td>IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP协议、UDP协议</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>有FTP、HTTP、TELNET、SMTP、DNS等协议</td>\n</tr>\n</tbody>\n</table>\n<p>因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。</p>\n<h3 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h3><p>socket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。</p>\n<p>socket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。</p>\n<h2 id=\"Http消息\"><a href=\"#Http消息\" class=\"headerlink\" title=\"Http消息\"></a>Http消息</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p>\n<h3 id=\"URL和URI区别\"><a href=\"#URL和URI区别\" class=\"headerlink\" title=\"URL和URI区别\"></a>URL和URI区别</h3><table>\n<thead>\n<tr>\n<th>URI</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</td>\n<td>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</td>\n</tr>\n<tr>\n<td>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</td>\n<td>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等</td>\n</tr>\n<tr>\n<td>URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。</td>\n<td>URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等</td>\n</tr>\n</tbody>\n</table>\n<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>\n<p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p>\n<p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</p>\n<p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p>\n<p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p>\n<p>5、释放 TCP连接;</p>\n<p>6、浏览器将该 html 文本并显示内容; 　　</p>\n<h3 id=\"客户端请求消息\"><a href=\"#客户端请求消息\" class=\"headerlink\" title=\"客户端请求消息\"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。<br><img src=\"http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\" alt=\"image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB\"></p>\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /562f25980001b1b106000338.jpg HTTP/1.1</div><div class=\"line\">Host    img.mukewang.com</div><div class=\"line\">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class=\"line\">Accept    image/webp,image/*,*/*;q=0.8</div><div class=\"line\">Referer    http://www.imooc.com/</div><div class=\"line\">Accept-Encoding    gzip, deflate, sdch</div><div class=\"line\">Accept-Language    zh-CN,zh;q=0.8</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</p>\n<p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p>\n<p>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</p>\n<p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p>\n<p>第三部分：空行，请求头部后面的空行是必须的</p>\n<p>即使第四部分的请求数据为空，也必须有空行。</p>\n<p>第四部分：请求数据也叫主体，可以添加任意的其他数据。</p>\n<p>这个例子的请求数据为空。</p>\n<h4 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST / HTTP1.1</div><div class=\"line\">Host:www.wrox.com</div><div class=\"line\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</div><div class=\"line\">Content-Type:application/x-www-form-urlencoded</div><div class=\"line\">Content-Length:40</div><div class=\"line\">Connection: Keep-Alive</div><div class=\"line\"></div><div class=\"line\">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>第二部分：请求头部，第二行至第六行。<br>第三部分：空行，第七行的空行。<br>第四部分：请求数据，第八行。</p>\n<h3 id=\"响应消息Response\"><a href=\"#响应消息Response\" class=\"headerlink\" title=\"响应消息Response\"></a>响应消息Response</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br><img src=\"http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\" alt=\"image_1bdbg60ceq2slf71po2416m781g.png-110.7kB\"></p>\n<h2 id=\"请求方法和状态码\"><a href=\"#请求方法和状态码\" class=\"headerlink\" title=\"请求方法和状态码\"></a>请求方法和状态码</h2><h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD    类</td>\n<td>似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td>POST    向</td>\n<td>指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT    从客</td>\n<td>户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTION</td>\n<td>S    允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。<br>HTTP状态码的英文为HTTP Status Code。</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>分类描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1**</td>\n<td>信息，服务器收到请求，需要请求者继续执行操作</td>\n</tr>\n<tr>\n<td>2**</td>\n<td>成功，操作被成功接收并处理</td>\n</tr>\n<tr>\n<td>3**</td>\n<td>重定向，需要进一步的操作以完成请求</td>\n</tr>\n<tr>\n<td>4**</td>\n<td>客户端错误，请求包含语法错误或无法完成请求</td>\n</tr>\n<tr>\n<td>5**</td>\n<td>服务器错误，服务器在处理请求的过程中发生了错误</td>\n</tr>\n</tbody>\n</table>\n<p>常见的状态码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">200 OK                        //客户端请求成功</div><div class=\"line\">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </div><div class=\"line\">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</div><div class=\"line\">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</div><div class=\"line\">500 Internal Server Error     //服务器发生不可预期的错误</div><div class=\"line\">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</div></pre></td></tr></table></figure></p>\n<h3 id=\"HTTP-content-type\"><a href=\"#HTTP-content-type\" class=\"headerlink\" title=\"HTTP content-type\"></a>HTTP content-type</h3><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。</p>\n<h3 id=\"HTTP-响应头信息\"><a href=\"#HTTP-响应头信息\" class=\"headerlink\" title=\"HTTP 响应头信息\"></a>HTTP 响应头信息</h3><p>HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。</p>\n<table>\n<thead>\n<tr>\n<th>应答头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allow</td>\n<td>服务器支持哪些请求方法（如GET、POST等）。</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>应该在什么时候认为文档已经过期，从而不再缓存它？</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href=\"http://host/path&quot;)让浏览器读取指定的页面。\" target=\"_blank\" rel=\"external\">http://host/path&quot;)让浏览器读取指定的页面。</a></td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"get和post区别\"><a href=\"#get和post区别\" class=\"headerlink\" title=\"get和post区别\"></a>get和post区别</h3><ul>\n<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>\n</li>\n<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>\n</li>\n<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>\n</li>\n<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>\n</li>\n<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>\n</li>\n<li><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p>\n</li>\n<li><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p>\n</li>\n<li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>\n</li>\n<li><p>GET参数通过URL传递，POST放在Request body中。</p>\n</li>\n</ul>\n<p><strong>GET和POST还有一个重大区别：</strong></p>\n<p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>\n<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>\n<p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p>\n<ol>\n<li>GET与POST都有自己的语义，不能随便混用。</li>\n<li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li>\n<li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li>\n</ol>\n<h3 id=\"Https\"><a href=\"#Https\" class=\"headerlink\" title=\"Https\"></a>Https</h3><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p>\n<p>不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。</p>\n<blockquote>\n<p>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。<br>（2） 篡改风险（tampering）：第三方可以修改通信内容。<br>（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。</p>\n</blockquote>\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>\n<blockquote>\n<p>（1） 所有信息都是加密传播，第三方无法窃听。<br>（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。<br>（3） 配备身份证书，防止身份被冒充。</p>\n</blockquote>\n<p><img src=\"http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png\" alt=\"image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB\"></p>\n<p><strong>参考文章</strong><br><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"external\">1、HTTP 协议入门</a><br><a href=\"http://www.runoob.com/http/http-intro.html\" target=\"_blank\" rel=\"external\">2、HTTP 教程</a><br><a href=\"http://www.shellsec.com/news/38129.html\" target=\"_blank\" rel=\"external\">3、看完还不懂HTTPS我直播吃翔</a></p>\n","site":{"data":{}},"excerpt":"<p>大三学习了《计算机网络》的课程，但是老师只把几层协议简单的介绍了一下，就没有深入的去学习。这么多年，一直在使用Http，在去年的时候才开始使用到Https，回过头来发现关于Http的细节性的东西遗漏了很多。欠过账的迟早要还的！在我对Servlet进行研究时，发现很多底层上的参数搞不清楚到底是协议上的还是Servlet上的。所以，还是从Http的协议开始入手，重新学习和总结一下。</p>\n<h2 id=\"Http简介\"><a href=\"#Http简介\" class=\"headerlink\" title=\"Http简介\"></a>Http简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/or284kgq1fb4jnl0r5nc05be/image_1bdb8ch37lma16jm7ng5qludb9.png\" alt=\"image_1bdb8ch37lma16jm7ng5qludb9.png-55.7kB\"></p>","more":"<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n<p>HTTP默认端口号为80，Https的默认端口为443。</p>\n<p><img src=\"http://static.zybuluo.com/a8167270/81kxa9epi097u1lmf1i392d9/image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png\" alt=\"image_1bdb8fnhh17e61k2cgvm1qrg1rf7m.png-19.7kB\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>\n<p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>\n<p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>\n<p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>\n<p>5、支持B/S及C/S模式。</p>\n<h3 id=\"TCP-amp-HTTP-amp-UDP\"><a href=\"#TCP-amp-HTTP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; HTTP &amp; UDP:\"></a>TCP &amp; HTTP &amp; UDP:</h3><p>TCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>网络层</th>\n<th>所包含协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络层</td>\n<td>IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP协议、UDP协议</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>有FTP、HTTP、TELNET、SMTP、DNS等协议</td>\n</tr>\n</tbody>\n</table>\n<p>因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。</p>\n<h3 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h3><p>socket是为了实现通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。</p>\n<p>socket只是一种连接模式，不是协议，tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，.用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。</p>\n<h2 id=\"Http消息\"><a href=\"#Http消息\" class=\"headerlink\" title=\"Http消息\"></a>Http消息</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p>\n<h3 id=\"URL和URI区别\"><a href=\"#URL和URI区别\" class=\"headerlink\" title=\"URL和URI区别\"></a>URL和URI区别</h3><table>\n<thead>\n<tr>\n<th>URI</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</td>\n<td>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</td>\n</tr>\n<tr>\n<td>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</td>\n<td>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等</td>\n</tr>\n<tr>\n<td>URI一般由三部组成：1、访问资源的命名机制。 2、存放资源的主机名。3、资源自身的名称，由路径表示，着重强调于资源。</td>\n<td>URL一般由三部组成：1、协议(或称为服务方式)。2、存有该资源的主机IP地址(有时也包括端口号)。3、主机资源的具体地址。如目录和文件名等</td>\n</tr>\n</tbody>\n</table>\n<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>\n<p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p>\n<p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</p>\n<p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p>\n<p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p>\n<p>5、释放 TCP连接;</p>\n<p>6、浏览器将该 html 文本并显示内容; 　　</p>\n<h3 id=\"客户端请求消息\"><a href=\"#客户端请求消息\" class=\"headerlink\" title=\"客户端请求消息\"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。<br><img src=\"http://static.zybuluo.com/a8167270/vjdci2jg0wv18fqq0g67kvcv/image_1bdbfq85p1hlknb01gfb1olnlv313.png\" alt=\"image_1bdbfq85p1hlknb01gfb1olnlv313.png-15.1kB\"></p>\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /562f25980001b1b106000338.jpg HTTP/1.1</div><div class=\"line\">Host    img.mukewang.com</div><div class=\"line\">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class=\"line\">Accept    image/webp,image/*,*/*;q=0.8</div><div class=\"line\">Referer    http://www.imooc.com/</div><div class=\"line\">Accept-Encoding    gzip, deflate, sdch</div><div class=\"line\">Accept-Language    zh-CN,zh;q=0.8</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</p>\n<p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p>\n<p>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</p>\n<p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p>\n<p>第三部分：空行，请求头部后面的空行是必须的</p>\n<p>即使第四部分的请求数据为空，也必须有空行。</p>\n<p>第四部分：请求数据也叫主体，可以添加任意的其他数据。</p>\n<p>这个例子的请求数据为空。</p>\n<h4 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST / HTTP1.1</div><div class=\"line\">Host:www.wrox.com</div><div class=\"line\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</div><div class=\"line\">Content-Type:application/x-www-form-urlencoded</div><div class=\"line\">Content-Length:40</div><div class=\"line\">Connection: Keep-Alive</div><div class=\"line\"></div><div class=\"line\">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure>\n<p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>第二部分：请求头部，第二行至第六行。<br>第三部分：空行，第七行的空行。<br>第四部分：请求数据，第八行。</p>\n<h3 id=\"响应消息Response\"><a href=\"#响应消息Response\" class=\"headerlink\" title=\"响应消息Response\"></a>响应消息Response</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br><img src=\"http://static.zybuluo.com/a8167270/r69ad6bar07rb5gkbrf13m75/image_1bdbg60ceq2slf71po2416m781g.png\" alt=\"image_1bdbg60ceq2slf71po2416m781g.png-110.7kB\"></p>\n<h2 id=\"请求方法和状态码\"><a href=\"#请求方法和状态码\" class=\"headerlink\" title=\"请求方法和状态码\"></a>请求方法和状态码</h2><h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD    类</td>\n<td>似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td>POST    向</td>\n<td>指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT    从客</td>\n<td>户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTION</td>\n<td>S    允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。<br>HTTP状态码的英文为HTTP Status Code。</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>分类描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1**</td>\n<td>信息，服务器收到请求，需要请求者继续执行操作</td>\n</tr>\n<tr>\n<td>2**</td>\n<td>成功，操作被成功接收并处理</td>\n</tr>\n<tr>\n<td>3**</td>\n<td>重定向，需要进一步的操作以完成请求</td>\n</tr>\n<tr>\n<td>4**</td>\n<td>客户端错误，请求包含语法错误或无法完成请求</td>\n</tr>\n<tr>\n<td>5**</td>\n<td>服务器错误，服务器在处理请求的过程中发生了错误</td>\n</tr>\n</tbody>\n</table>\n<p>常见的状态码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">200 OK                        //客户端请求成功</div><div class=\"line\">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </div><div class=\"line\">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</div><div class=\"line\">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</div><div class=\"line\">500 Internal Server Error     //服务器发生不可预期的错误</div><div class=\"line\">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</div></pre></td></tr></table></figure></p>\n<h3 id=\"HTTP-content-type\"><a href=\"#HTTP-content-type\" class=\"headerlink\" title=\"HTTP content-type\"></a>HTTP content-type</h3><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。</p>\n<h3 id=\"HTTP-响应头信息\"><a href=\"#HTTP-响应头信息\" class=\"headerlink\" title=\"HTTP 响应头信息\"></a>HTTP 响应头信息</h3><p>HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。</p>\n<table>\n<thead>\n<tr>\n<th>应答头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allow</td>\n<td>服务器支持哪些请求方法（如GET、POST等）。</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>应该在什么时候认为文档已经过期，从而不再缓存它？</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href=\"http://host/path&quot;)让浏览器读取指定的页面。\">http://host/path&quot;)让浏览器读取指定的页面。</a></td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"get和post区别\"><a href=\"#get和post区别\" class=\"headerlink\" title=\"get和post区别\"></a>get和post区别</h3><ul>\n<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>\n</li>\n<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>\n</li>\n<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>\n</li>\n<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>\n</li>\n<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>\n</li>\n<li><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p>\n</li>\n<li><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p>\n</li>\n<li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>\n</li>\n<li><p>GET参数通过URL传递，POST放在Request body中。</p>\n</li>\n</ul>\n<p><strong>GET和POST还有一个重大区别：</strong></p>\n<p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>\n<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>\n<p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p>\n<ol>\n<li>GET与POST都有自己的语义，不能随便混用。</li>\n<li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li>\n<li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li>\n</ol>\n<h3 id=\"Https\"><a href=\"#Https\" class=\"headerlink\" title=\"Https\"></a>Https</h3><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p>\n<p>不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。</p>\n<blockquote>\n<p>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。<br>（2） 篡改风险（tampering）：第三方可以修改通信内容。<br>（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。</p>\n</blockquote>\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>\n<blockquote>\n<p>（1） 所有信息都是加密传播，第三方无法窃听。<br>（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。<br>（3） 配备身份证书，防止身份被冒充。</p>\n</blockquote>\n<p><img src=\"http://static.zybuluo.com/a8167270/iy10phozcvv9r36zjk9pvyne/image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png\" alt=\"image_1bdbnhqg6p5rtpr1q6f13nnmrk2a.png-337.3kB\"></p>\n<p><strong>参考文章</strong><br><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">1、HTTP 协议入门</a><br><a href=\"http://www.runoob.com/http/http-intro.html\">2、HTTP 教程</a><br><a href=\"http://www.shellsec.com/news/38129.html\">3、看完还不懂HTTPS我直播吃翔</a></p>"},{"title":"我对代码的理解","date":"2017-04-13T01:07:51.000Z","toc":true,"_content":"\n\n转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。\n\n## 美观\n\n代码整体外观应该是赏心悦目的。\n\n打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。\n\n\n## 易读\n\n阅读代码，不看注释就能理解。\n\n代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：\n\n<!-- more -->\n\n```objectivec\n\n//根据姓名和性别创建一个人\n- (void)createPerson:(NSString *) name withSex:(NSString *)sex;\n\n```\n\n读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。\n\n## 简洁\n\n代码体验的是一个人的解决方案，应该最直接，效率最高！\n\n代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似`if(true) return true; else return false`的代码，像这种情况就很无语了。\n\n## 健壮\n\n代码是能接受考验的！\n\n安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。\n\n在编写函数块的时候：\n\n 要对入参进行判断；\n2. 在调用其他函数的时候，要明确该函数可能返回的数据；\n3. 要对可能出现的异常进行处理，可以catch，可以抛出；\n3. 明确返回值能否传回null。\n……\n\n写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。\n\n## 设计\n\n在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：\n\n1. 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。\n2. 根据当前的数据模型，采用何时的数据结构。\n2. 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏\n3. 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用\n4. 研究某一块的逻辑处理，是否有适用的成熟算法\n\n“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，\n\n## 总结\n\n好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。\n\n\n","source":"_posts/我对代码的理解.md","raw":"---\ntitle: 我对代码的理解\ndate: 2017-04-13 09:07:51\ncategory: 杂谈\ntags: 代码\ntoc: true\n---\n\n\n转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。\n\n## 美观\n\n代码整体外观应该是赏心悦目的。\n\n打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。\n\n\n## 易读\n\n阅读代码，不看注释就能理解。\n\n代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：\n\n<!-- more -->\n\n```objectivec\n\n//根据姓名和性别创建一个人\n- (void)createPerson:(NSString *) name withSex:(NSString *)sex;\n\n```\n\n读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。\n\n## 简洁\n\n代码体验的是一个人的解决方案，应该最直接，效率最高！\n\n代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似`if(true) return true; else return false`的代码，像这种情况就很无语了。\n\n## 健壮\n\n代码是能接受考验的！\n\n安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。\n\n在编写函数块的时候：\n\n 要对入参进行判断；\n2. 在调用其他函数的时候，要明确该函数可能返回的数据；\n3. 要对可能出现的异常进行处理，可以catch，可以抛出；\n3. 明确返回值能否传回null。\n……\n\n写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。\n\n## 设计\n\n在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：\n\n1. 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。\n2. 根据当前的数据模型，采用何时的数据结构。\n2. 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏\n3. 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用\n4. 研究某一块的逻辑处理，是否有适用的成熟算法\n\n“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，\n\n## 总结\n\n好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。\n\n\n","slug":"我对代码的理解","published":1,"updated":"2017-05-22T09:27:06.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj300kwbo0009qwluwfxp84c5","content":"<p>转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。</p>\n<h2 id=\"美观\"><a href=\"#美观\" class=\"headerlink\" title=\"美观\"></a>美观</h2><p>代码整体外观应该是赏心悦目的。</p>\n<p>打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。</p>\n<h2 id=\"易读\"><a href=\"#易读\" class=\"headerlink\" title=\"易读\"></a>易读</h2><p>阅读代码，不看注释就能理解。</p>\n<p>代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据姓名和性别创建一个人</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)createPerson:(<span class=\"built_in\">NSString</span> *) name withSex:(<span class=\"built_in\">NSString</span> *)sex;</div></pre></td></tr></table></figure>\n<p>读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。</p>\n<h2 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a>简洁</h2><p>代码体验的是一个人的解决方案，应该最直接，效率最高！</p>\n<p>代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似<code>if(true) return true; else return false</code>的代码，像这种情况就很无语了。</p>\n<h2 id=\"健壮\"><a href=\"#健壮\" class=\"headerlink\" title=\"健壮\"></a>健壮</h2><p>代码是能接受考验的！</p>\n<p>安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。</p>\n<p>在编写函数块的时候：</p>\n<p> 要对入参进行判断；</p>\n<ol>\n<li>在调用其他函数的时候，要明确该函数可能返回的数据；</li>\n<li>要对可能出现的异常进行处理，可以catch，可以抛出；</li>\n<li>明确返回值能否传回null。<br>……</li>\n</ol>\n<p>写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：</p>\n<ol>\n<li>画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。</li>\n<li>根据当前的数据模型，采用何时的数据结构。</li>\n<li>简单的画一下流程图，可以让同事帮忙看一下是否有遗漏</li>\n<li>判断一下当前的需求符合某种模型，是否有何时设计模式可以采用</li>\n<li>研究某一块的逻辑处理，是否有适用的成熟算法</li>\n</ol>\n<p>“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。</p>\n","site":{"data":{}},"excerpt":"<p>转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。</p>\n<h2 id=\"美观\"><a href=\"#美观\" class=\"headerlink\" title=\"美观\"></a>美观</h2><p>代码整体外观应该是赏心悦目的。</p>\n<p>打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。</p>\n<h2 id=\"易读\"><a href=\"#易读\" class=\"headerlink\" title=\"易读\"></a>易读</h2><p>阅读代码，不看注释就能理解。</p>\n<p>代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：</p>","more":"<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据姓名和性别创建一个人</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)createPerson:(<span class=\"built_in\">NSString</span> *) name withSex:(<span class=\"built_in\">NSString</span> *)sex;</div></pre></td></tr></table></figure>\n<p>读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。</p>\n<h2 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a>简洁</h2><p>代码体验的是一个人的解决方案，应该最直接，效率最高！</p>\n<p>代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似<code>if(true) return true; else return false</code>的代码，像这种情况就很无语了。</p>\n<h2 id=\"健壮\"><a href=\"#健壮\" class=\"headerlink\" title=\"健壮\"></a>健壮</h2><p>代码是能接受考验的！</p>\n<p>安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。</p>\n<p>在编写函数块的时候：</p>\n<p> 要对入参进行判断；</p>\n<ol>\n<li>在调用其他函数的时候，要明确该函数可能返回的数据；</li>\n<li>要对可能出现的异常进行处理，可以catch，可以抛出；</li>\n<li>明确返回值能否传回null。<br>……</li>\n</ol>\n<p>写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：</p>\n<ol>\n<li>画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。</li>\n<li>根据当前的数据模型，采用何时的数据结构。</li>\n<li>简单的画一下流程图，可以让同事帮忙看一下是否有遗漏</li>\n<li>判断一下当前的需求符合某种模型，是否有何时设计模式可以采用</li>\n<li>研究某一块的逻辑处理，是否有适用的成熟算法</li>\n</ol>\n<p>“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。</p>"},{"title":"写在前面的话","date":"2017-04-12T06:19:11.000Z","_content":"\n在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。\n\n参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！\n\ncsdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。\n\n第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。\n<!-- more -->\n ","source":"_posts/写在前面的话.md","raw":"---\ntitle: 写在前面的话\ndate: 2017-04-12 14:19:11\ncategory: 杂谈\ntags: 生活\n---\n\n在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。\n\n参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！\n\ncsdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。\n\n第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。\n<!-- more -->\n ","slug":"写在前面的话","published":1,"updated":"2017-05-22T09:27:11.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj300kwbq000dqwlum5i7udex","content":"<p>在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。</p>\n<p>参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！</p>\n<p>csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。</p>\n<p>第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。</p>\n<p>参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！</p>\n<p>csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。</p>\n<p>第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。<br></p>","more":"<p></p>"}],"PostAsset":[{"_id":"source/_posts/Servlet与JSP/ServletLifeCycle.jpg","post":"cj300kwb60002qwlu4c6as3a9","slug":"ServletLifeCycle.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Servlet与JSP/filter.png","post":"cj300kwb60002qwlu4c6as3a9","slug":"filter.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj300kwax0000qwlu8o6z4s1t","category_id":"cj300kwb90004qwluvbe8i5gj","_id":"cj300kwbr000eqwluxjppauny"},{"post_id":"cj300kwb60002qwlu4c6as3a9","category_id":"cj300kwb90004qwluvbe8i5gj","_id":"cj300kwbu000iqwluj53la3eg"},{"post_id":"cj300kwbj0006qwluklp3v2ok","category_id":"cj300kwb90004qwluvbe8i5gj","_id":"cj300kwbv000mqwluvprkv6rr"},{"post_id":"cj300kwbl0008qwluybty4yz6","category_id":"cj300kwbu000jqwluizx55ai8","_id":"cj300kwbx000qqwlubhukt349"},{"post_id":"cj300kwbo0009qwluwfxp84c5","category_id":"cj300kwbv000nqwluw99ny937","_id":"cj300kwc0000uqwlu0nucaa6u"},{"post_id":"cj300kwbq000dqwlum5i7udex","category_id":"cj300kwbv000nqwluw99ny937","_id":"cj300kwc1000wqwlursl5a4ys"}],"PostTag":[{"post_id":"cj300kwax0000qwlu8o6z4s1t","tag_id":"cj300kwbi0005qwlu74xse6mf","_id":"cj300kwbq000cqwlu24w8p8us"},{"post_id":"cj300kwb60002qwlu4c6as3a9","tag_id":"cj300kwbi0005qwlu74xse6mf","_id":"cj300kwbu000hqwlu8ac0j3n5"},{"post_id":"cj300kwbj0006qwluklp3v2ok","tag_id":"cj300kwbt000gqwluzzs5lk9j","_id":"cj300kwbv000lqwlujg9v42no"},{"post_id":"cj300kwbl0008qwluybty4yz6","tag_id":"cj300kwbu000kqwlu7jj8qlud","_id":"cj300kwbw000pqwluameu9mnf"},{"post_id":"cj300kwbo0009qwluwfxp84c5","tag_id":"cj300kwbw000oqwluihlxj51p","_id":"cj300kwbz000tqwlubjck6vw8"},{"post_id":"cj300kwbq000dqwlum5i7udex","tag_id":"cj300kwby000sqwlurcad0otl","_id":"cj300kwc1000vqwlualhy7xf6"}],"Tag":[{"name":"JavaWeb","_id":"cj300kwbi0005qwlu74xse6mf"},{"name":"struts2","_id":"cj300kwbt000gqwluzzs5lk9j"},{"name":"协议","_id":"cj300kwbu000kqwlu7jj8qlud"},{"name":"代码","_id":"cj300kwbw000oqwluihlxj51p"},{"name":"生活","_id":"cj300kwby000sqwlurcad0otl"}]}}
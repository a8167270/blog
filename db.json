{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1491989097407},{"_id":"themes/BlueLake/README.en.md","hash":"bbf97e0ccd3d5b5873557ec79c2d92f376c5a8e7","modified":1491989097408},{"_id":"themes/BlueLake/_config.yml","hash":"9ab6265b4ed713bd2c4c32ebf78edd347502297b","modified":1492083752725},{"_id":"themes/BlueLake/README.md","hash":"aef443d6167e2fbde60b90b4498357a804077107","modified":1491989097408},{"_id":"themes/BlueLake/package.json","hash":"85bcd5e6174018729c071b745208c61efbe802df","modified":1491989097414},{"_id":"source/_posts/Servlet与JSP.md","hash":"2ee3fdcbd00b882150b1544e6d0eb9f6e3add032","modified":1492082512954},{"_id":"source/_posts/写在前面的话.md","hash":"6d32b53f11df53c4d7fce144ea7bfb615e8831f5","modified":1492081761440},{"_id":"source/about/index.md","hash":"6c7e9a4cfa358a1e3c4ac3200e37daec6c46c1e4","modified":1492082012632},{"_id":"source/_posts/我对代码的理解.md","hash":"163e1ae0ccea7e38dd17ee4859eab72ea7f7c817","modified":1492083521056},{"_id":"themes/BlueLake/.git/config","hash":"7e25608fae05296ec4af5a16d8ecf5042faf30a3","modified":1491989097402},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491989097401},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491989093253},{"_id":"themes/BlueLake/.git/index","hash":"0232e00806981b979e0feeb2c7e4df67f4b86b7c","modified":1492063185440},{"_id":"themes/BlueLake/.git/packed-refs","hash":"9d98604fc58292ce141ab1c599435dcac8fb1b41","modified":1491989097399},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"cab904a1bbf8d0a189f4132f383224ee8abcc2d5","modified":1491989097408},{"_id":"themes/BlueLake/languages/en.yml","hash":"17913588a78da9e0786ff81359fb74bb8f318f13","modified":1491989097409},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"0f0f120fe5abfd6e0431bbf6757947247c96c341","modified":1491989097409},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"1439db20fb4f4490fab3daea52698479d3fe3f4c","modified":1491989097409},{"_id":"themes/BlueLake/languages/ko.yml","hash":"9e90f546b374cb00e0566f2703642a4129f68029","modified":1491989097409},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"4f69ffded977be0153a8cbd84fb2a95f4da572db","modified":1491989097409},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"7b97b232cb15cd476cdbf6efe7e904add553ce16","modified":1491989097409},{"_id":"themes/BlueLake/layout/archive.jade","hash":"bf6256702a4a30f19fb3a49dd4e1af1d3445cf71","modified":1491989097412},{"_id":"themes/BlueLake/layout/index.jade","hash":"3fe1f0c5021ac696ed9846ecb1c75d285fa46708","modified":1491989097413},{"_id":"themes/BlueLake/layout/base.jade","hash":"aaf4922adaea4dd1ada9ec203083c10734feaa41","modified":1491989097413},{"_id":"themes/BlueLake/layout/category.jade","hash":"d1beec4b0741cd8a2cd058939fd50238a6a6068e","modified":1491989097413},{"_id":"themes/BlueLake/layout/post.jade","hash":"daec2b8c915a64d9904442cea91be9c6e04b3aba","modified":1491989097413},{"_id":"themes/BlueLake/layout/page.jade","hash":"d18e258121bf6fbeb9f512ac9cab2473c01476b4","modified":1491989097413},{"_id":"themes/BlueLake/layout/tag.jade","hash":"7e8fe70f3d4c6e03658c8b88bd93b6bf1f06e258","modified":1491989097413},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1491989097414},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1491989097415},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491989093253},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491989093254},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1491989093254},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491989093257},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"f8350122f526d1486856eaec2a2bc40a2a3a6df1","modified":1491989097402},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"370519c70e95e00c89197986827f0f8281f8d7df","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"d1b124aaaef36a90b49086d90741510cd583b566","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"99c92f051b66b4d63dfc90e55b1fdb943a620c46","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1491989097410},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1491989097411},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1491989097411},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1491989097411},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"f76015c742a8a4353dd374863947e83c48c6bd16","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"9beba53cedfe0fd9bd5c0ba0707784bfc6cc3017","modified":1491989097411},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"5e2c1d5b4d3323b7b0d5bfeb9a62e6d580b42c10","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"c12994a9076e9f428d960b14689a9c15fe15d93c","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/search.jade","hash":"fa4ce51b7caa955aa3a0386bf819bf7edf022425","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1491989097412},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1491989097412},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1491989097414},{"_id":"themes/BlueLake/source/css/style.styl","hash":"4950c91d327645618ccc594523a292d1d15c3122","modified":1491989097415},{"_id":"themes/BlueLake/source/js/totop.js","hash":"4827a35694b99eadb6dfee5281d2488a33614077","modified":1491989097417},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"274e5d9126bd6bc195cfd0d6a62b0482cf61d698","modified":1491989097415},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1491989097417},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"ed7141f7374cdb3f05a28fe818b7aa6b47baac37","modified":1491989097415},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"abc2a26a153298a497b6eba314d93f0835cc4185","modified":1491989097416},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"77a78dbe06adc208cb0d3497f1ea2b9b66f44226","modified":1491989097416},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1491989097417},{"_id":"themes/BlueLake/.git/objects/pack/pack-c78babc38c615104f9f0b9ab8e1eeca0ff1244b7.idx","hash":"233df69f4e812429aabddc75bba5ce75c2ac3bf1","modified":1491989097295},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"2746420385b64cac06645971e9a7fb3c9a73b824","modified":1491989097401},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491989097400},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"f8350122f526d1486856eaec2a2bc40a2a3a6df1","modified":1491989097401},{"_id":"themes/BlueLake/.git/objects/pack/pack-c78babc38c615104f9f0b9ab8e1eeca0ff1244b7.pack","hash":"550af370cd318a7d407a71a1bf6ecab08773cdc6","modified":1491989097332},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"f8350122f526d1486856eaec2a2bc40a2a3a6df1","modified":1491989097400}],"Category":[{"name":"Java","_id":"cj1gc0h0f0003nwlud0q0ro4r"},{"name":"杂谈","_id":"cj1gc0h0f0006nwluwh6fe7ex"}],"Data":[],"Page":[{"title":"about","date":"2017-04-13T11:13:32.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-13 19:13:32\n---\n","updated":"2017-04-13T11:13:32.632Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1gc0h0f0001nwlutapcg7km","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Servlet与JSP","date":"2017-04-13T07:33:26.000Z","_content":"\n在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。\n\n## 1. Servlet的生命周期\n服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。\n首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。\n\n## 2. 状态代码\nWeb服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。\n\n### 设置状态代码：setStatus\n> 在向客户程序发送任何文档内容之前设置状态代码\n\nsetStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。\n\nHttp1.1中可用的特定的状态代码，如下\n\n|代码区间|描述|\n|---|---|\n|100-199|都是信息性的，标示客户应该采取的其他动作|\n|200-299|标示请求成功|\n|300-399|用于已移走的文件，常常包括Location报头，指出新的地址|\n|400-499|表明由客户引发的错误|\n|500-599|表示由服务器引发的错误|\n\n## Http相应报头\n\n指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。\n\n```java\n setHeader（String headerName,String headerValue） \n```\nHttp允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。\n\n## 3. 过滤器\nServlet过滤器可以动态的拦截请求和响应，可以实现以下目的：\n\n* 在客户端请求访问后端资源之前，拦截请求\n* 在服务端的响应发送客户端之前，处理响应\n\n### 3.1 过滤器方法\n过滤器是实现`javax.servlet.Filter`接口的类。\n\n```java\npub\n```","source":"_posts/Servlet与JSP.md","raw":"---\ntitle: Servlet与JSP\ndate: 2017-04-13 15:33:26\ncategory: Java\ntags: jsp\n---\n\n在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。\n\n## 1. Servlet的生命周期\n服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。\n首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。\n\n## 2. 状态代码\nWeb服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。\n\n### 设置状态代码：setStatus\n> 在向客户程序发送任何文档内容之前设置状态代码\n\nsetStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。\n\nHttp1.1中可用的特定的状态代码，如下\n\n|代码区间|描述|\n|---|---|\n|100-199|都是信息性的，标示客户应该采取的其他动作|\n|200-299|标示请求成功|\n|300-399|用于已移走的文件，常常包括Location报头，指出新的地址|\n|400-499|表明由客户引发的错误|\n|500-599|表示由服务器引发的错误|\n\n## Http相应报头\n\n指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。\n\n```java\n setHeader（String headerName,String headerValue） \n```\nHttp允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。\n\n## 3. 过滤器\nServlet过滤器可以动态的拦截请求和响应，可以实现以下目的：\n\n* 在客户端请求访问后端资源之前，拦截请求\n* 在服务端的响应发送客户端之前，处理响应\n\n### 3.1 过滤器方法\n过滤器是实现`javax.servlet.Filter`接口的类。\n\n```java\npub\n```","slug":"Servlet与JSP","published":1,"updated":"2017-04-13T11:21:52.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1gc0gzy0000nwluhycbcyy3","content":"<p>在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。</p>\n<h2 id=\"1-Servlet的生命周期\"><a href=\"#1-Servlet的生命周期\" class=\"headerlink\" title=\"1. Servlet的生命周期\"></a>1. Servlet的生命周期</h2><p>服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。<br>首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。</p>\n<h2 id=\"2-状态代码\"><a href=\"#2-状态代码\" class=\"headerlink\" title=\"2. 状态代码\"></a>2. 状态代码</h2><p>Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。</p>\n<h3 id=\"设置状态代码：setStatus\"><a href=\"#设置状态代码：setStatus\" class=\"headerlink\" title=\"设置状态代码：setStatus\"></a>设置状态代码：setStatus</h3><blockquote>\n<p>在向客户程序发送任何文档内容之前设置状态代码</p>\n</blockquote>\n<p>setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。</p>\n<p>Http1.1中可用的特定的状态代码，如下</p>\n<table>\n<thead>\n<tr>\n<th>代码区间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100-199</td>\n<td>都是信息性的，标示客户应该采取的其他动作</td>\n</tr>\n<tr>\n<td>200-299</td>\n<td>标示请求成功</td>\n</tr>\n<tr>\n<td>300-399</td>\n<td>用于已移走的文件，常常包括Location报头，指出新的地址</td>\n</tr>\n<tr>\n<td>400-499</td>\n<td>表明由客户引发的错误</td>\n</tr>\n<tr>\n<td>500-599</td>\n<td>表示由服务器引发的错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Http相应报头\"><a href=\"#Http相应报头\" class=\"headerlink\" title=\"Http相应报头\"></a>Http相应报头</h2><p>指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setHeader（String headerName,String headerValue）</div></pre></td></tr></table></figure>\n<p>Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。</p>\n<h2 id=\"3-过滤器\"><a href=\"#3-过滤器\" class=\"headerlink\" title=\"3. 过滤器\"></a>3. 过滤器</h2><p>Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的：</p>\n<ul>\n<li>在客户端请求访问后端资源之前，拦截请求</li>\n<li>在服务端的响应发送客户端之前，处理响应</li>\n</ul>\n<h3 id=\"3-1-过滤器方法\"><a href=\"#3-1-过滤器方法\" class=\"headerlink\" title=\"3.1 过滤器方法\"></a>3.1 过滤器方法</h3><p>过滤器是实现<code>javax.servlet.Filter</code>接口的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pub</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。</p>\n<h2 id=\"1-Servlet的生命周期\"><a href=\"#1-Servlet的生命周期\" class=\"headerlink\" title=\"1. Servlet的生命周期\"></a>1. Servlet的生命周期</h2><p>服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。<br>首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。</p>\n<h2 id=\"2-状态代码\"><a href=\"#2-状态代码\" class=\"headerlink\" title=\"2. 状态代码\"></a>2. 状态代码</h2><p>Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。</p>\n<h3 id=\"设置状态代码：setStatus\"><a href=\"#设置状态代码：setStatus\" class=\"headerlink\" title=\"设置状态代码：setStatus\"></a>设置状态代码：setStatus</h3><blockquote>\n<p>在向客户程序发送任何文档内容之前设置状态代码</p>\n</blockquote>\n<p>setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。</p>\n<p>Http1.1中可用的特定的状态代码，如下</p>\n<table>\n<thead>\n<tr>\n<th>代码区间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100-199</td>\n<td>都是信息性的，标示客户应该采取的其他动作</td>\n</tr>\n<tr>\n<td>200-299</td>\n<td>标示请求成功</td>\n</tr>\n<tr>\n<td>300-399</td>\n<td>用于已移走的文件，常常包括Location报头，指出新的地址</td>\n</tr>\n<tr>\n<td>400-499</td>\n<td>表明由客户引发的错误</td>\n</tr>\n<tr>\n<td>500-599</td>\n<td>表示由服务器引发的错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Http相应报头\"><a href=\"#Http相应报头\" class=\"headerlink\" title=\"Http相应报头\"></a>Http相应报头</h2><p>指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setHeader（String headerName,String headerValue）</div></pre></td></tr></table></figure>\n<p>Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。</p>\n<h2 id=\"3-过滤器\"><a href=\"#3-过滤器\" class=\"headerlink\" title=\"3. 过滤器\"></a>3. 过滤器</h2><p>Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的：</p>\n<ul>\n<li>在客户端请求访问后端资源之前，拦截请求</li>\n<li>在服务端的响应发送客户端之前，处理响应</li>\n</ul>\n<h3 id=\"3-1-过滤器方法\"><a href=\"#3-1-过滤器方法\" class=\"headerlink\" title=\"3.1 过滤器方法\"></a>3.1 过滤器方法</h3><p>过滤器是实现<code>javax.servlet.Filter</code>接口的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pub</div></pre></td></tr></table></figure>"},{"title":"我对代码的理解","date":"2017-04-13T01:07:51.000Z","_content":"\n\n转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。\n\n## 1、 美观\n\n代码整体外观应该是赏心悦目的。\n\n打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。\n\n\n## 2、 易读\n\n阅读代码，不看注释就能理解。\n\n代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：\n\n```objectivec\n\n//根据姓名和性别创建一个人\n- (void)createPerson:(NSString *) name withSex:(NSString *)sex;\n\n```\n\n读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。\n\n## 3、 简洁\n\n代码体验的是一个人的解决方案，应该最直接，效率最高！\n\n代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似`if(true) return true; else return false`的代码，像这种情况就很无语了。\n\n## 4、 健壮\n\n代码是能接受考验的！\n\n安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。\n\n在编写函数块的时候：\n\n 要对入参进行判断；\n2. 在调用其他函数的时候，要明确该函数可能返回的数据；\n3. 要对可能出现的异常进行处理，可以catch，可以抛出；\n3. 明确返回值能否传回null。\n……\n\n写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。\n\n## 5、 设计\n\n在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：\n\n1. 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。\n2. 根据当前的数据模型，采用何时的数据结构。\n2. 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏\n3. 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用\n4. 研究某一块的逻辑处理，是否有适用的成熟算法\n\n“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，\n\n## 6、 总结\n\n好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。\n\n\n","source":"_posts/我对代码的理解.md","raw":"---\ntitle: 我对代码的理解\ndate: 2017-04-13 09:07:51\ncategory: 杂谈\ntags: 代码\n---\n\n\n转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。\n\n## 1、 美观\n\n代码整体外观应该是赏心悦目的。\n\n打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。\n\n\n## 2、 易读\n\n阅读代码，不看注释就能理解。\n\n代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：\n\n```objectivec\n\n//根据姓名和性别创建一个人\n- (void)createPerson:(NSString *) name withSex:(NSString *)sex;\n\n```\n\n读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。\n\n## 3、 简洁\n\n代码体验的是一个人的解决方案，应该最直接，效率最高！\n\n代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似`if(true) return true; else return false`的代码，像这种情况就很无语了。\n\n## 4、 健壮\n\n代码是能接受考验的！\n\n安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。\n\n在编写函数块的时候：\n\n 要对入参进行判断；\n2. 在调用其他函数的时候，要明确该函数可能返回的数据；\n3. 要对可能出现的异常进行处理，可以catch，可以抛出；\n3. 明确返回值能否传回null。\n……\n\n写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。\n\n## 5、 设计\n\n在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：\n\n1. 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。\n2. 根据当前的数据模型，采用何时的数据结构。\n2. 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏\n3. 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用\n4. 研究某一块的逻辑处理，是否有适用的成熟算法\n\n“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，\n\n## 6、 总结\n\n好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。\n\n\n","slug":"我对代码的理解","published":1,"updated":"2017-04-13T11:38:41.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1gc0h0f0002nwlu92dsuypr","content":"<p>转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。</p>\n<h2 id=\"1、-美观\"><a href=\"#1、-美观\" class=\"headerlink\" title=\"1、 美观\"></a>1、 美观</h2><p>代码整体外观应该是赏心悦目的。</p>\n<p>打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。</p>\n<h2 id=\"2、-易读\"><a href=\"#2、-易读\" class=\"headerlink\" title=\"2、 易读\"></a>2、 易读</h2><p>阅读代码，不看注释就能理解。</p>\n<p>代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据姓名和性别创建一个人</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)createPerson:(<span class=\"built_in\">NSString</span> *) name withSex:(<span class=\"built_in\">NSString</span> *)sex;</div></pre></td></tr></table></figure>\n<p>读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。</p>\n<h2 id=\"3、-简洁\"><a href=\"#3、-简洁\" class=\"headerlink\" title=\"3、 简洁\"></a>3、 简洁</h2><p>代码体验的是一个人的解决方案，应该最直接，效率最高！</p>\n<p>代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似<code>if(true) return true; else return false</code>的代码，像这种情况就很无语了。</p>\n<h2 id=\"4、-健壮\"><a href=\"#4、-健壮\" class=\"headerlink\" title=\"4、 健壮\"></a>4、 健壮</h2><p>代码是能接受考验的！</p>\n<p>安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。</p>\n<p>在编写函数块的时候：</p>\n<p> 要对入参进行判断；</p>\n<ol>\n<li>在调用其他函数的时候，要明确该函数可能返回的数据；</li>\n<li>要对可能出现的异常进行处理，可以catch，可以抛出；</li>\n<li>明确返回值能否传回null。<br>……</li>\n</ol>\n<p>写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。</p>\n<h2 id=\"5、-设计\"><a href=\"#5、-设计\" class=\"headerlink\" title=\"5、 设计\"></a>5、 设计</h2><p>在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：</p>\n<ol>\n<li>画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。</li>\n<li>根据当前的数据模型，采用何时的数据结构。</li>\n<li>简单的画一下流程图，可以让同事帮忙看一下是否有遗漏</li>\n<li>判断一下当前的需求符合某种模型，是否有何时设计模式可以采用</li>\n<li>研究某一块的逻辑处理，是否有适用的成熟算法</li>\n</ol>\n<p>“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，</p>\n<h2 id=\"6、-总结\"><a href=\"#6、-总结\" class=\"headerlink\" title=\"6、 总结\"></a>6、 总结</h2><p>好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。</p>\n<h2 id=\"1、-美观\"><a href=\"#1、-美观\" class=\"headerlink\" title=\"1、 美观\"></a>1、 美观</h2><p>代码整体外观应该是赏心悦目的。</p>\n<p>打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。</p>\n<h2 id=\"2、-易读\"><a href=\"#2、-易读\" class=\"headerlink\" title=\"2、 易读\"></a>2、 易读</h2><p>阅读代码，不看注释就能理解。</p>\n<p>代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据姓名和性别创建一个人</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)createPerson:(<span class=\"built_in\">NSString</span> *) name withSex:(<span class=\"built_in\">NSString</span> *)sex;</div></pre></td></tr></table></figure>\n<p>读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。</p>\n<h2 id=\"3、-简洁\"><a href=\"#3、-简洁\" class=\"headerlink\" title=\"3、 简洁\"></a>3、 简洁</h2><p>代码体验的是一个人的解决方案，应该最直接，效率最高！</p>\n<p>代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似<code>if(true) return true; else return false</code>的代码，像这种情况就很无语了。</p>\n<h2 id=\"4、-健壮\"><a href=\"#4、-健壮\" class=\"headerlink\" title=\"4、 健壮\"></a>4、 健壮</h2><p>代码是能接受考验的！</p>\n<p>安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。</p>\n<p>在编写函数块的时候：</p>\n<p> 要对入参进行判断；</p>\n<ol>\n<li>在调用其他函数的时候，要明确该函数可能返回的数据；</li>\n<li>要对可能出现的异常进行处理，可以catch，可以抛出；</li>\n<li>明确返回值能否传回null。<br>……</li>\n</ol>\n<p>写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。</p>\n<h2 id=\"5、-设计\"><a href=\"#5、-设计\" class=\"headerlink\" title=\"5、 设计\"></a>5、 设计</h2><p>在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计：</p>\n<ol>\n<li>画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。</li>\n<li>根据当前的数据模型，采用何时的数据结构。</li>\n<li>简单的画一下流程图，可以让同事帮忙看一下是否有遗漏</li>\n<li>判断一下当前的需求符合某种模型，是否有何时设计模式可以采用</li>\n<li>研究某一块的逻辑处理，是否有适用的成熟算法</li>\n</ol>\n<p>“磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰，</p>\n<h2 id=\"6、-总结\"><a href=\"#6、-总结\" class=\"headerlink\" title=\"6、 总结\"></a>6、 总结</h2><p>好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。</p>\n"},{"title":"写在前面的话","date":"2017-04-12T06:19:11.000Z","_content":"\n在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。\n\n参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！\n\ncsdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。\n\n第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。\n\n ","source":"_posts/写在前面的话.md","raw":"---\ntitle: 写在前面的话\ndate: 2017-04-12 14:19:11\ncategory: 杂谈\ntags: 生活\n---\n\n在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。\n\n参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！\n\ncsdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。\n\n第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。\n\n ","slug":"写在前面的话","published":1,"updated":"2017-04-13T11:09:21.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1gc0h0f0005nwlumv79xxrc","content":"<p>在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。</p>\n<p>参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！</p>\n<p>csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。</p>\n<p>第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。</p>\n<p>参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！</p>\n<p>csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。</p>\n<p>第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1gc0gzy0000nwluhycbcyy3","category_id":"cj1gc0h0f0003nwlud0q0ro4r","_id":"cj1gc0h0f0009nwlu3xckcfdg"},{"post_id":"cj1gc0h0f0002nwlu92dsuypr","category_id":"cj1gc0h0f0006nwluwh6fe7ex","_id":"cj1gc0h0f000dnwlu0fj6h8ch"},{"post_id":"cj1gc0h0f0005nwlumv79xxrc","category_id":"cj1gc0h0f0006nwluwh6fe7ex","_id":"cj1gc0h0f000fnwlujxgmnpvc"}],"PostTag":[{"post_id":"cj1gc0gzy0000nwluhycbcyy3","tag_id":"cj1gc0h0f0004nwluqri2yjom","_id":"cj1gc0h0f0008nwlujwmt3292"},{"post_id":"cj1gc0h0f0002nwlu92dsuypr","tag_id":"cj1gc0h0f0007nwluh9bh8dpv","_id":"cj1gc0h0f000cnwluxaosqj3b"},{"post_id":"cj1gc0h0f0005nwlumv79xxrc","tag_id":"cj1gc0h0f000bnwluqtk0kji9","_id":"cj1gc0h0f000enwlu2she9bmi"}],"Tag":[{"name":"jsp","_id":"cj1gc0h0f0004nwluqri2yjom"},{"name":"代码","_id":"cj1gc0h0f0007nwluh9bh8dpv"},{"name":"生活","_id":"cj1gc0h0f000bnwluqtk0kji9"}]}}
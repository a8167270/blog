[{"title":"Servlet与JSP","date":"2017-04-13T07:33:26.000Z","path":"2017/04/13/Servlet与JSP/","text":"在某种程度上来讲，可以将servlet看作是含有HTML的Java程序；将JSP看作是含有Java代码的HTML页面。JSP文档可以理解成是编写servlet的另一种形式，JSP页面会被翻译成servelt，而servlet会被编译。在整个请求期间运行的就是servlet。 1. Servlet的生命周期服务器只对每一个servlet创建单一实例，每个用户请求会创建新的线程，将用户请求交付给相应的doGet和doPost进行处理。首次创建servlet，会调用个init方法，因此，init应放置一次性设置代码的相关环节。 2. 状态代码Web服务器对请求的响应，一般有一个状态行、一些响应报头、一个空行和相应的文档构成；Http响应的状态行由HTTP版本、一个状态代码和一段相关的消息组成。但是消息直接与状态代码相关，而http的版本是由服务器来决定的，故而，servlet需要做的只是设置状态代码。系统自动设置的代码为200。如果需要设置状态代码，则可以使用response.setStatus,response.sendRedirect或response.sendError方法。 设置状态代码：setStatus 在向客户程序发送任何文档内容之前设置状态代码 setStatus方法以一个整数（状态代码，int类型）为参数，但为了避免出错，尽量不要使用数字，而要使用HttpServletResponse中定义的常量。每个常量的名字都来自于每个常量所对应的标准HTTP1.1消息，全部大写并添加SC（Status Code）前缀，状态代码404对应的消息为Not Found，与之对应的常量是SC_NOT_FOUND。 Http1.1中可用的特定的状态代码，如下 代码区间 描述 100-199 都是信息性的，标示客户应该采取的其他动作 200-299 标示请求成功 300-399 用于已移走的文件，常常包括Location报头，指出新的地址 400-499 表明由客户引发的错误 500-599 表示由服务器引发的错误 Http相应报头指定报头，最常用的方式是使用HttpServletResponse的setHeader方法，这个方法接收两个字符串：报头的名称和报头的值。和设置状态代码一样，必须在返回实际的文档之前指定相关报头。 1setHeader（String headerName,String headerValue） Http允许相同的报头名多次出现，例如，多个Accept和Set-Cookie报头分别指定所支持的不同MIME类型和不同cookie。 3. 过滤器Servlet过滤器可以动态的拦截请求和响应，可以实现以下目的： 在客户端请求访问后端资源之前，拦截请求 在服务端的响应发送客户端之前，处理响应 3.1 过滤器方法过滤器是实现javax.servlet.Filter接口的类。 1pub","categories":[{"name":"Java","slug":"Java","permalink":"https://a8167270.github.io/blogRecord/categories/Java/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"https://a8167270.github.io/blogRecord/tags/jsp/"}]},{"title":"我对代码的理解","date":"2017-04-13T01:07:51.000Z","path":"2017/04/13/我对代码的理解/","text":"转眼已经毕业快两年，从本科刚开始学C语言，到现在Java，object-c语言开发，中间接触过C#，python，jsp，jQuery，JavaScript，scala，C++，html，css，markdown等多种语言。在读研究生的时候，去日本的一家公司实习时，见识过规范的开发模式和优秀的架构，也在实验室的两年里维护了一堆漏洞百出的代码。学习过《clean code》和《重构》等关于代码质量的书，也阅读过阿里和谷歌的代码规范。阅读优秀的代码是一种享受，阅读烂代码是一种折磨。所以我想谈一谈自己对优秀的代码的一点理解。 1、 美观代码整体外观应该是赏心悦目的。 打开编辑器，代码整体布局结构给人第一印象应该是赏心悦目的。这里的赏心悦目具体表现在代码行长度，空格，函数块的行数，及规范化的代码注释等。这些条件都处理好了，不论是什么语言，给人的感觉都应该是整齐，规范。现在编辑工具大都支持自动规范代码的功能，比如Visual studio和eclipse等，但是有的时候自动规范的代码并不一定美观，还需要自己去处理。 2、 易读阅读代码，不看注释就能理解。 代码的易读性是代码的首要条件。代码就像是写文章，是给其他人看的。易读性的代码具体体现在函数的命名，参数的设置，函数命名可以加长，但是参数不易过多。Objective-C语言是个很好的例子，代码如下示意： 123//根据姓名和性别创建一个人- (void)createPerson:(NSString *) name withSex:(NSString *)sex; 读这种代码像读阅读文章一样，很清晰的能够明白当前的函数块要做的什么事。 3、 简洁代码体验的是一个人的解决方案，应该最直接，效率最高！ 代码的简洁性是最体验程序员内功的地方，包括对所用语言的理解，框架API的使用及算法的设计等等。现在很多面向对象语言都开始引入函数式编程思想，C#在3.5的时候好像就已经引入linq查询，java在java8的版本引入stream，了解这些特性能够简化代码的编写。但是最重要的还是编程思维的问题，见过很多次类似if(true) return true; else return false的代码，像这种情况就很无语了。 4、 健壮代码是能接受考验的！ 安全的代码，是在运行的过程中不会出现内存泄漏，崩溃，抛出非预见性异常等情况的。保证健壮性的代码的形式有很多种，最常见也最有效的就是添加单元测试，虽然会额外的增加工作量，但是收益还是挺大。另外一种也可以采取同行评审，但是在同时间大量代码的情况下，这种审核的效果不是很好。所以，最好在开发的过程中就要安全性保护的概念。 在编写函数块的时候： 要对入参进行判断； 在调用其他函数的时候，要明确该函数可能返回的数据； 要对可能出现的异常进行处理，可以catch，可以抛出； 明确返回值能否传回null。…… 写出健壮的代码的措施有很多，很多时候出现bug就是因为考虑不够细致，没有处理全面。 5、 设计在工作的过程中，很多人都是一接到任务就动手开始写，花费大量的时间写完后，发现有很多地方明明可以做的更好，但是由于deadline的原因，只好不了了之，日积月累就成了破窗。所以，在接到新的任务或需求的时候，可以留一点时间进行一下规划设计： 画一下uml类图，研究一下类与类之间的关系，简单的设计一下数据模型。 根据当前的数据模型，采用何时的数据结构。 简单的画一下流程图，可以让同事帮忙看一下是否有遗漏 判断一下当前的需求符合某种模型，是否有何时设计模式可以采用 研究某一块的逻辑处理，是否有适用的成熟算法 “磨刀不误砍柴工”，做规划设计并不会耽误太多时间，但是，会让你对整个流程非常清晰， 6、 总结好的代码并不是一蹴而就的，往往称为最佳实践的代码是经过多次评审、重构，不断的进行改善优化，才能成为优秀的代码。写代码容易，写出好代码难。写代码不是简单的码代码块，需要有敬畏之心，知道自己的代码会有改进的地方，才能不断的去学习，进步。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://a8167270.github.io/blogRecord/categories/杂谈/"}],"tags":[{"name":"代码","slug":"代码","permalink":"https://a8167270.github.io/blogRecord/tags/代码/"}]},{"title":"写在前面的话","date":"2017-04-12T06:19:11.000Z","path":"2017/04/12/写在前面的话/","text":"在读研究生的时候，看到师兄学习《算法导论》，读书笔记记录了厚厚的一本，深受感染，所以很多时候就把学习笔记记录到纸质的笔记本上，两年下来也有一两个小本。研究生毕业后，几经周折，终于在路上给搞丢了，心疼的一塌糊涂。 参加工作后，又重新开始买了一个大本记录笔记，但是问题还是出现了，在学校的时候还不明显，工作了笔记本不能随身携带，查阅很不方便。于是开始折腾blog！ csdn，博客园，简书，SegmentFault都尝试过，最终的解决方案是，作业部落VIP版 + SegmentFault。前两天回看SegmentFault的文章，感觉样式好丑，并且担心图片数据丢失问题，所以就开始想自己建一个blog。于是就使用github + hexo搭建一个静态blog。 第一个感觉就是方便，私密。之前在其他地方的blog，会慢慢地转移到这个上面来。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://a8167270.github.io/blogRecord/categories/杂谈/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://a8167270.github.io/blogRecord/tags/生活/"}]}]